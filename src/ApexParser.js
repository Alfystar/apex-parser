// Generated from ApexParser.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ApexParserListener = require('./ApexParserListener').ApexParserListener;
var grammarFileName = "ApexParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003t\u039e\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0007\u0003\u00ad\n\u0003\f\u0003\u000e",
    "\u0003\u00b0\u000b\u0003\u0003\u0003\u0003\u0003\u0007\u0003\u00b4\n",
    "\u0003\f\u0003\u000e\u0003\u00b7\u000b\u0003\u0003\u0003\u0003\u0003",
    "\u0007\u0003\u00bb\n\u0003\f\u0003\u000e\u0003\u00be\u000b\u0003\u0003",
    "\u0003\u0005\u0003\u00c1\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0005\u0004\u00c7\n\u0004\u0003\u0004\u0003\u0004\u0005",
    "\u0004\u00cb\n\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u00d3\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0007\u0006\u00da\n\u0006",
    "\f\u0006\u000e\u0006\u00dd\u000b\u0006\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0005\u0007\u00e3\n\u0007\u0003\u0007\u0003\u0007",
    "\u0003\b\u0003\b\u0003\b\u0007\b\u00ea\n\b\f\b\u000e\b\u00ed\u000b\b",
    "\u0003\t\u0003\t\u0007\t\u00f1\n\t\f\t\u000e\t\u00f4\u000b\t\u0003\t",
    "\u0003\t\u0003\n\u0003\n\u0007\n\u00fa\n\n\f\n\u000e\n\u00fd\u000b\n",
    "\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0005\u000b\u0103\n\u000b\u0003",
    "\u000b\u0003\u000b\u0007\u000b\u0107\n\u000b\f\u000b\u000e\u000b\u010a",
    "\u000b\u000b\u0003\u000b\u0005\u000b\u010d\n\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u0122",
    "\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r",
    "\u012b\n\r\u0003\u000e\u0007\u000e\u012e\n\u000e\f\u000e\u000e\u000e",
    "\u0131\u000b\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0135\n\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u013b\n",
    "\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0007\u0011\u0149\n\u0011\f\u0011\u000e\u0011\u014c\u000b\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0012\u0007\u0012\u0151\n\u0012\f\u0012",
    "\u000e\u0012\u0154\u000b\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0158",
    "\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0007\u0013\u0161\n\u0013\f\u0013\u000e\u0013",
    "\u0164\u000b\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0169",
    "\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015",
    "\u016f\n\u0015\f\u0015\u000e\u0015\u0172\u000b\u0015\u0003\u0015\u0005",
    "\u0015\u0175\n\u0015\u0005\u0015\u0177\n\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u017e\n\u0016\f\u0016",
    "\u000e\u0016\u0181\u000b\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003",
    "\u0017\u0007\u0017\u0187\n\u0017\f\u0017\u000e\u0017\u018a\u000b\u0017",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u018e\n\u0018\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0005\u001a\u0196",
    "\n\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0007\u001b\u019d\n\u001b\f\u001b\u000e\u001b\u01a0\u000b\u001b\u0003",
    "\u001c\u0007\u001c\u01a3\n\u001c\f\u001c\u000e\u001c\u01a6\u000b\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0007\u001d\u01ae\n\u001d\f\u001d\u000e\u001d\u01b1\u000b\u001d\u0003",
    "\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0005\u001f\u01ba\n\u001f\u0003\u001f\u0005\u001f\u01bd\n\u001f",
    "\u0003 \u0003 \u0005 \u01c1\n \u0003 \u0007 \u01c4\n \f \u000e \u01c7",
    "\u000b \u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0005\"",
    "\u01d0\n\"\u0003#\u0003#\u0003#\u0003#\u0007#\u01d6\n#\f#\u000e#\u01d9",
    "\u000b#\u0005#\u01db\n#\u0003#\u0005#\u01de\n#\u0003#\u0003#\u0003$",
    "\u0003$\u0007$\u01e4\n$\f$\u000e$\u01e7\u000b$\u0003$\u0003$\u0003%",
    "\u0003%\u0003%\u0003&\u0007&\u01ef\n&\f&\u000e&\u01f2\u000b&\u0003&",
    "\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u020b\n\'\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0005(\u0212\n(\u0003)\u0003)\u0003)\u0003)\u0003)\u0006",
    ")\u0219\n)\r)\u000e)\u021a\u0003)\u0003)\u0003*\u0003*\u0003*\u0005",
    "*\u0222\n*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    ",\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    ".\u0003.\u0003.\u0006.\u0239\n.\r.\u000e.\u023a\u0003.\u0005.\u023e",
    "\n.\u0003.\u0005.\u0241\n.\u0003/\u0003/\u0005/\u0245\n/\u0003/\u0003",
    "/\u00030\u00030\u00030\u00030\u00031\u00031\u00031\u00032\u00032\u0003",
    "2\u00033\u00033\u00033\u00033\u00034\u00034\u00034\u00034\u00035\u0003",
    "5\u00035\u00035\u00036\u00036\u00036\u00036\u00037\u00037\u00037\u0005",
    "7\u0266\n7\u00037\u00037\u00038\u00038\u00038\u00038\u00038\u00039\u0003",
    "9\u00039\u00059\u0272\n9\u00039\u00039\u00059\u0276\n9\u0003:\u0003",
    ":\u0003:\u0003;\u0007;\u027c\n;\f;\u000e;\u027f\u000b;\u0003;\u0003",
    ";\u0005;\u0283\n;\u0003<\u0003<\u0003<\u0005<\u0288\n<\u0003=\u0003",
    "=\u0003=\u0005=\u028d\n=\u0003>\u0003>\u0003>\u0007>\u0292\n>\f>\u000e",
    ">\u0295\u000b>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003",
    "?\u0003@\u0003@\u0005@\u02a1\n@\u0003@\u0003@\u0005@\u02a5\n@\u0003",
    "@\u0003@\u0005@\u02a9\n@\u0005@\u02ab\n@\u0003A\u0003A\u0005A\u02af",
    "\nA\u0003B\u0007B\u02b2\nB\fB\u000eB\u02b5\u000bB\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003E\u0003",
    "E\u0003E\u0007E\u02c5\nE\fE\u000eE\u02c8\u000bE\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0005F\u02d8\nF\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u02e8\nF\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0005",
    "F\u02f4\nF\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0005F\u0316\nF\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0007F\u0322\nF\fF\u000eF\u0325",
    "\u000bF\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0005G\u0334\nG\u0003H\u0003H\u0003H\u0005",
    "H\u0339\nH\u0003H\u0003H\u0003H\u0003H\u0003H\u0005H\u0340\nH\u0003",
    "H\u0003H\u0003H\u0003H\u0005H\u0346\nH\u0003H\u0005H\u0349\nH\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0003I\u0005I\u0351\nI\u0003J\u0003J\u0003",
    "J\u0007J\u0356\nJ\fJ\u000eJ\u0359\u000bJ\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0005K\u0360\nK\u0003L\u0003L\u0003L\u0003M\u0003M\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0005N\u036e\nN\u0005N\u0370\n",
    "N\u0003O\u0003O\u0003O\u0003O\u0007O\u0376\nO\fO\u000eO\u0379\u000b",
    "O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0007Q\u0385\nQ\fQ\u000eQ\u0388\u000bQ\u0003Q\u0003Q\u0003R\u0003",
    "R\u0005R\u038e\nR\u0003R\u0003R\u0003S\u0003S\u0003S\u0007S\u0395\n",
    "S\fS\u000eS\u0398\u000bS\u0003S\u0003S\u0003T\u0003T\u0003T\u0003\u0396",
    "\u0003\u008aU\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016",
    "\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp",
    "rtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092",
    "\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u0002\f",
    "\u0004\u0002\u001e\u001e;>\u0003\u0002Y\\\u0003\u0002NO\u0004\u0002",
    "]^bb\u0003\u0002[\\\u0003\u0002RV\u0004\u0002IIdn\u0003\u0002YZ\u0003",
    "\u0002EE\u0006\u0002\u0003)+,.:oo\u0002\u03ec\u0002\u00a8\u0003\u0002",
    "\u0002\u0002\u0004\u00c0\u0003\u0002\u0002\u0002\u0006\u00c2\u0003\u0002",
    "\u0002\u0002\b\u00ce\u0003\u0002\u0002\u0002\n\u00d6\u0003\u0002\u0002",
    "\u0002\f\u00de\u0003\u0002\u0002\u0002\u000e\u00e6\u0003\u0002\u0002",
    "\u0002\u0010\u00ee\u0003\u0002\u0002\u0002\u0012\u00f7\u0003\u0002\u0002",
    "\u0002\u0014\u010c\u0003\u0002\u0002\u0002\u0016\u0121\u0003\u0002\u0002",
    "\u0002\u0018\u012a\u0003\u0002\u0002\u0002\u001a\u012f\u0003\u0002\u0002",
    "\u0002\u001c\u013c\u0003\u0002\u0002\u0002\u001e\u0140\u0003\u0002\u0002",
    "\u0002 \u0144\u0003\u0002\u0002\u0002\"\u0152\u0003\u0002\u0002\u0002",
    "$\u015d\u0003\u0002\u0002\u0002&\u0165\u0003\u0002\u0002\u0002(\u016a",
    "\u0003\u0002\u0002\u0002*\u017a\u0003\u0002\u0002\u0002,\u0188\u0003",
    "\u0002\u0002\u0002.\u018b\u0003\u0002\u0002\u00020\u018f\u0003\u0002",
    "\u0002\u00022\u0193\u0003\u0002\u0002\u00024\u0199\u0003\u0002\u0002",
    "\u00026\u01a4\u0003\u0002\u0002\u00028\u01aa\u0003\u0002\u0002\u0002",
    ":\u01b2\u0003\u0002\u0002\u0002<\u01b4\u0003\u0002\u0002\u0002>\u01be",
    "\u0003\u0002\u0002\u0002@\u01c8\u0003\u0002\u0002\u0002B\u01cf\u0003",
    "\u0002\u0002\u0002D\u01d1\u0003\u0002\u0002\u0002F\u01e1\u0003\u0002",
    "\u0002\u0002H\u01ea\u0003\u0002\u0002\u0002J\u01f0\u0003\u0002\u0002",
    "\u0002L\u020a\u0003\u0002\u0002\u0002N\u020c\u0003\u0002\u0002\u0002",
    "P\u0213\u0003\u0002\u0002\u0002R\u021e\u0003\u0002\u0002\u0002T\u0225",
    "\u0003\u0002\u0002\u0002V\u022b\u0003\u0002\u0002\u0002X\u022f\u0003",
    "\u0002\u0002\u0002Z\u0235\u0003\u0002\u0002\u0002\\\u0242\u0003\u0002",
    "\u0002\u0002^\u0248\u0003\u0002\u0002\u0002`\u024c\u0003\u0002\u0002",
    "\u0002b\u024f\u0003\u0002\u0002\u0002d\u0252\u0003\u0002\u0002\u0002",
    "f\u0256\u0003\u0002\u0002\u0002h\u025a\u0003\u0002\u0002\u0002j\u025e",
    "\u0003\u0002\u0002\u0002l\u0262\u0003\u0002\u0002\u0002n\u0269\u0003",
    "\u0002\u0002\u0002p\u026e\u0003\u0002\u0002\u0002r\u0277\u0003\u0002",
    "\u0002\u0002t\u027d\u0003\u0002\u0002\u0002v\u0284\u0003\u0002\u0002",
    "\u0002x\u0289\u0003\u0002\u0002\u0002z\u028e\u0003\u0002\u0002\u0002",
    "|\u029b\u0003\u0002\u0002\u0002~\u02aa\u0003\u0002\u0002\u0002\u0080",
    "\u02ae\u0003\u0002\u0002\u0002\u0082\u02b3\u0003\u0002\u0002\u0002\u0084",
    "\u02bb\u0003\u0002\u0002\u0002\u0086\u02bd\u0003\u0002\u0002\u0002\u0088",
    "\u02c1\u0003\u0002\u0002\u0002\u008a\u02d7\u0003\u0002\u0002\u0002\u008c",
    "\u0333\u0003\u0002\u0002\u0002\u008e\u0348\u0003\u0002\u0002\u0002\u0090",
    "\u034a\u0003\u0002\u0002\u0002\u0092\u0352\u0003\u0002\u0002\u0002\u0094",
    "\u035a\u0003\u0002\u0002\u0002\u0096\u0361\u0003\u0002\u0002\u0002\u0098",
    "\u0364\u0003\u0002\u0002\u0002\u009a\u036f\u0003\u0002\u0002\u0002\u009c",
    "\u0371\u0003\u0002\u0002\u0002\u009e\u037c\u0003\u0002\u0002\u0002\u00a0",
    "\u0380\u0003\u0002\u0002\u0002\u00a2\u038b\u0003\u0002\u0002\u0002\u00a4",
    "\u0391\u0003\u0002\u0002\u0002\u00a6\u039b\u0003\u0002\u0002\u0002\u00a8",
    "\u00a9\u0005\u0004\u0003\u0002\u00a9\u00aa\u0007\u0002\u0002\u0003\u00aa",
    "\u0003\u0003\u0002\u0002\u0002\u00ab\u00ad\u0005\u0016\f\u0002\u00ac",
    "\u00ab\u0003\u0002\u0002\u0002\u00ad\u00b0\u0003\u0002\u0002\u0002\u00ae",
    "\u00ac\u0003\u0002\u0002\u0002\u00ae\u00af\u0003\u0002\u0002\u0002\u00af",
    "\u00b1\u0003\u0002\u0002\u0002\u00b0\u00ae\u0003\u0002\u0002\u0002\u00b1",
    "\u00c1\u0005\u0006\u0004\u0002\u00b2\u00b4\u0005\u0016\f\u0002\u00b3",
    "\u00b2\u0003\u0002\u0002\u0002\u00b4\u00b7\u0003\u0002\u0002\u0002\u00b5",
    "\u00b3\u0003\u0002\u0002\u0002\u00b5\u00b6\u0003\u0002\u0002\u0002\u00b6",
    "\u00b8\u0003\u0002\u0002\u0002\u00b7\u00b5\u0003\u0002\u0002\u0002\u00b8",
    "\u00c1\u0005\b\u0005\u0002\u00b9\u00bb\u0005\u0016\f\u0002\u00ba\u00b9",
    "\u0003\u0002\u0002\u0002\u00bb\u00be\u0003\u0002\u0002\u0002\u00bc\u00ba",
    "\u0003\u0002\u0002\u0002\u00bc\u00bd\u0003\u0002\u0002\u0002\u00bd\u00bf",
    "\u0003\u0002\u0002\u0002\u00be\u00bc\u0003\u0002\u0002\u0002\u00bf\u00c1",
    "\u0005\f\u0007\u0002\u00c0\u00ae\u0003\u0002\u0002\u0002\u00c0\u00b5",
    "\u0003\u0002\u0002\u0002\u00c0\u00bc\u0003\u0002\u0002\u0002\u00c1\u0005",
    "\u0003\u0002\u0002\u0002\u00c2\u00c3\u0007\b\u0002\u0002\u00c3\u00c6",
    "\u0005\u00a6T\u0002\u00c4\u00c5\u0007\u0010\u0002\u0002\u00c5\u00c7",
    "\u0005*\u0016\u0002\u00c6\u00c4\u0003\u0002\u0002\u0002\u00c6\u00c7",
    "\u0003\u0002\u0002\u0002\u00c7\u00ca\u0003\u0002\u0002\u0002\u00c8\u00c9",
    "\u0007\u0017\u0002\u0002\u00c9\u00cb\u0005\u000e\b\u0002\u00ca\u00c8",
    "\u0003\u0002\u0002\u0002\u00ca\u00cb\u0003\u0002\u0002\u0002\u00cb\u00cc",
    "\u0003\u0002\u0002\u0002\u00cc\u00cd\u0005\u0010\t\u0002\u00cd\u0007",
    "\u0003\u0002\u0002\u0002\u00ce\u00cf\u0007\u000f\u0002\u0002\u00cf\u00d0",
    "\u0005\u00a6T\u0002\u00d0\u00d2\u0007B\u0002\u0002\u00d1\u00d3\u0005",
    "\n\u0006\u0002\u00d2\u00d1\u0003\u0002\u0002\u0002\u00d2\u00d3\u0003",
    "\u0002\u0002\u0002\u00d3\u00d4\u0003\u0002\u0002\u0002\u00d4\u00d5\u0007",
    "C\u0002\u0002\u00d5\t\u0003\u0002\u0002\u0002\u00d6\u00db\u0005\u00a6",
    "T\u0002\u00d7\u00d8\u0007G\u0002\u0002\u00d8\u00da\u0005\u00a6T\u0002",
    "\u00d9\u00d7\u0003\u0002\u0002\u0002\u00da\u00dd\u0003\u0002\u0002\u0002",
    "\u00db\u00d9\u0003\u0002\u0002\u0002\u00db\u00dc\u0003\u0002\u0002\u0002",
    "\u00dc\u000b\u0003\u0002\u0002\u0002\u00dd\u00db\u0003\u0002\u0002\u0002",
    "\u00de\u00df\u0007\u001b\u0002\u0002\u00df\u00e2\u0005\u00a6T\u0002",
    "\u00e0\u00e1\u0007\u0010\u0002\u0002\u00e1\u00e3\u0005\u000e\b\u0002",
    "\u00e2\u00e0\u0003\u0002\u0002\u0002\u00e2\u00e3\u0003\u0002\u0002\u0002",
    "\u00e3\u00e4\u0003\u0002\u0002\u0002\u00e4\u00e5\u0005\u0012\n\u0002",
    "\u00e5\r\u0003\u0002\u0002\u0002\u00e6\u00eb\u0005*\u0016\u0002\u00e7",
    "\u00e8\u0007G\u0002\u0002\u00e8\u00ea\u0005*\u0016\u0002\u00e9\u00e7",
    "\u0003\u0002\u0002\u0002\u00ea\u00ed\u0003\u0002\u0002\u0002\u00eb\u00e9",
    "\u0003\u0002\u0002\u0002\u00eb\u00ec\u0003\u0002\u0002\u0002\u00ec\u000f",
    "\u0003\u0002\u0002\u0002\u00ed\u00eb\u0003\u0002\u0002\u0002\u00ee\u00f2",
    "\u0007B\u0002\u0002\u00ef\u00f1\u0005\u0014\u000b\u0002\u00f0\u00ef",
    "\u0003\u0002\u0002\u0002\u00f1\u00f4\u0003\u0002\u0002\u0002\u00f2\u00f0",
    "\u0003\u0002\u0002\u0002\u00f2\u00f3\u0003\u0002\u0002\u0002\u00f3\u00f5",
    "\u0003\u0002\u0002\u0002\u00f4\u00f2\u0003\u0002\u0002\u0002\u00f5\u00f6",
    "\u0007C\u0002\u0002\u00f6\u0011\u0003\u0002\u0002\u0002\u00f7\u00fb",
    "\u0007B\u0002\u0002\u00f8\u00fa\u0005\"\u0012\u0002\u00f9\u00f8\u0003",
    "\u0002\u0002\u0002\u00fa\u00fd\u0003\u0002\u0002\u0002\u00fb\u00f9\u0003",
    "\u0002\u0002\u0002\u00fb\u00fc\u0003\u0002\u0002\u0002\u00fc\u00fe\u0003",
    "\u0002\u0002\u0002\u00fd\u00fb\u0003\u0002\u0002\u0002\u00fe\u00ff\u0007",
    "C\u0002\u0002\u00ff\u0013\u0003\u0002\u0002\u0002\u0100\u010d\u0007",
    "F\u0002\u0002\u0101\u0103\u0007)\u0002\u0002\u0102\u0101\u0003\u0002",
    "\u0002\u0002\u0102\u0103\u0003\u0002\u0002\u0002\u0103\u0104\u0003\u0002",
    "\u0002\u0002\u0104\u010d\u0005F$\u0002\u0105\u0107\u0005\u0016\f\u0002",
    "\u0106\u0105\u0003\u0002\u0002\u0002\u0107\u010a\u0003\u0002\u0002\u0002",
    "\u0108\u0106\u0003\u0002\u0002\u0002\u0108\u0109\u0003\u0002\u0002\u0002",
    "\u0109\u010b\u0003\u0002\u0002\u0002\u010a\u0108\u0003\u0002\u0002\u0002",
    "\u010b\u010d\u0005\u0018\r\u0002\u010c\u0100\u0003\u0002\u0002\u0002",
    "\u010c\u0102\u0003\u0002\u0002\u0002\u010c\u0108\u0003\u0002\u0002\u0002",
    "\u010d\u0015\u0003\u0002\u0002\u0002\u010e\u0122\u0005<\u001f\u0002",
    "\u010f\u0122\u0007\u0015\u0002\u0002\u0110\u0122\u0007#\u0002\u0002",
    "\u0111\u0122\u0007\"\u0002\u0002\u0112\u0122\u0007!\u0002\u0002\u0113",
    "\u0122\u0007/\u0002\u0002\u0114\u0122\u0007)\u0002\u0002\u0115\u0122",
    "\u0007\u0003\u0002\u0002\u0116\u0122\u0007\u0011\u0002\u0002\u0117\u0122",
    "\u00076\u0002\u0002\u0118\u0122\u0007 \u0002\u0002\u0119\u0122\u0007",
    "4\u0002\u0002\u011a\u0122\u0007,\u0002\u0002\u011b\u011c\u00079\u0002",
    "\u0002\u011c\u0122\u0007\'\u0002\u0002\u011d\u011e\u0007:\u0002\u0002",
    "\u011e\u0122\u0007\'\u0002\u0002\u011f\u0120\u0007\u0018\u0002\u0002",
    "\u0120\u0122\u0007\'\u0002\u0002\u0121\u010e\u0003\u0002\u0002\u0002",
    "\u0121\u010f\u0003\u0002\u0002\u0002\u0121\u0110\u0003\u0002\u0002\u0002",
    "\u0121\u0111\u0003\u0002\u0002\u0002\u0121\u0112\u0003\u0002\u0002\u0002",
    "\u0121\u0113\u0003\u0002\u0002\u0002\u0121\u0114\u0003\u0002\u0002\u0002",
    "\u0121\u0115\u0003\u0002\u0002\u0002\u0121\u0116\u0003\u0002\u0002\u0002",
    "\u0121\u0117\u0003\u0002\u0002\u0002\u0121\u0118\u0003\u0002\u0002\u0002",
    "\u0121\u0119\u0003\u0002\u0002\u0002\u0121\u011a\u0003\u0002\u0002\u0002",
    "\u0121\u011b\u0003\u0002\u0002\u0002\u0121\u011d\u0003\u0002\u0002\u0002",
    "\u0121\u011f\u0003\u0002\u0002\u0002\u0122\u0017\u0003\u0002\u0002\u0002",
    "\u0123\u012b\u0005\u001a\u000e\u0002\u0124\u012b\u0005\u001e\u0010\u0002",
    "\u0125\u012b\u0005\u001c\u000f\u0002\u0126\u012b\u0005\f\u0007\u0002",
    "\u0127\u012b\u0005\u0006\u0004\u0002\u0128\u012b\u0005\b\u0005\u0002",
    "\u0129\u012b\u0005 \u0011\u0002\u012a\u0123\u0003\u0002\u0002\u0002",
    "\u012a\u0124\u0003\u0002\u0002\u0002\u012a\u0125\u0003\u0002\u0002\u0002",
    "\u012a\u0126\u0003\u0002\u0002\u0002\u012a\u0127\u0003\u0002\u0002\u0002",
    "\u012a\u0128\u0003\u0002\u0002\u0002\u012a\u0129\u0003\u0002\u0002\u0002",
    "\u012b\u0019\u0003\u0002\u0002\u0002\u012c\u012e\u0005\u0016\f\u0002",
    "\u012d\u012c\u0003\u0002\u0002\u0002\u012e\u0131\u0003\u0002\u0002\u0002",
    "\u012f\u012d\u0003\u0002\u0002\u0002\u012f\u0130\u0003\u0002\u0002\u0002",
    "\u0130\u0134\u0003\u0002\u0002\u0002\u0131\u012f\u0003\u0002\u0002\u0002",
    "\u0132\u0135\u0005*\u0016\u0002\u0133\u0135\u00075\u0002\u0002\u0134",
    "\u0132\u0003\u0002\u0002\u0002\u0134\u0133\u0003\u0002\u0002\u0002\u0135",
    "\u0136\u0003\u0002\u0002\u0002\u0136\u0137\u0005\u00a6T\u0002\u0137",
    "\u013a\u00052\u001a\u0002\u0138\u013b\u0005F$\u0002\u0139\u013b\u0007",
    "F\u0002\u0002\u013a\u0138\u0003\u0002\u0002\u0002\u013a\u0139\u0003",
    "\u0002\u0002\u0002\u013b\u001b\u0003\u0002\u0002\u0002\u013c\u013d\u0005",
    "8\u001d\u0002\u013d\u013e\u00052\u001a\u0002\u013e\u013f\u0005F$\u0002",
    "\u013f\u001d\u0003\u0002\u0002\u0002\u0140\u0141\u0005*\u0016\u0002",
    "\u0141\u0142\u0005$\u0013\u0002\u0142\u0143\u0007F\u0002\u0002\u0143",
    "\u001f\u0003\u0002\u0002\u0002\u0144\u0145\u0005*\u0016\u0002\u0145",
    "\u0146\u0005\u00a6T\u0002\u0146\u014a\u0007B\u0002\u0002\u0147\u0149",
    "\u0005t;\u0002\u0148\u0147\u0003\u0002\u0002\u0002\u0149\u014c\u0003",
    "\u0002\u0002\u0002\u014a\u0148\u0003\u0002\u0002\u0002\u014a\u014b\u0003",
    "\u0002\u0002\u0002\u014b\u014d\u0003\u0002\u0002\u0002\u014c\u014a\u0003",
    "\u0002\u0002\u0002\u014d\u014e\u0007C\u0002\u0002\u014e!\u0003\u0002",
    "\u0002\u0002\u014f\u0151\u0005\u0016\f\u0002\u0150\u014f\u0003\u0002",
    "\u0002\u0002\u0151\u0154\u0003\u0002\u0002\u0002\u0152\u0150\u0003\u0002",
    "\u0002\u0002\u0152\u0153\u0003\u0002\u0002\u0002\u0153\u0157\u0003\u0002",
    "\u0002\u0002\u0154\u0152\u0003\u0002\u0002\u0002\u0155\u0158\u0005*",
    "\u0016\u0002\u0156\u0158\u00075\u0002\u0002\u0157\u0155\u0003\u0002",
    "\u0002\u0002\u0157\u0156\u0003\u0002\u0002\u0002\u0158\u0159\u0003\u0002",
    "\u0002\u0002\u0159\u015a\u0005\u00a6T\u0002\u015a\u015b\u00052\u001a",
    "\u0002\u015b\u015c\u0007F\u0002\u0002\u015c#\u0003\u0002\u0002\u0002",
    "\u015d\u0162\u0005&\u0014\u0002\u015e\u015f\u0007G\u0002\u0002\u015f",
    "\u0161\u0005&\u0014\u0002\u0160\u015e\u0003\u0002\u0002\u0002\u0161",
    "\u0164\u0003\u0002\u0002\u0002\u0162\u0160\u0003\u0002\u0002\u0002\u0162",
    "\u0163\u0003\u0002\u0002\u0002\u0163%\u0003\u0002\u0002\u0002\u0164",
    "\u0162\u0003\u0002\u0002\u0002\u0165\u0168\u0005\u00a6T\u0002\u0166",
    "\u0167\u0007I\u0002\u0002\u0167\u0169\u0005\u008aF\u0002\u0168\u0166",
    "\u0003\u0002\u0002\u0002\u0168\u0169\u0003\u0002\u0002\u0002\u0169\'",
    "\u0003\u0002\u0002\u0002\u016a\u0176\u0007B\u0002\u0002\u016b\u0170",
    "\u0005\u008aF\u0002\u016c\u016d\u0007G\u0002\u0002\u016d\u016f\u0005",
    "\u008aF\u0002\u016e\u016c\u0003\u0002\u0002\u0002\u016f\u0172\u0003",
    "\u0002\u0002\u0002\u0170\u016e\u0003\u0002\u0002\u0002\u0170\u0171\u0003",
    "\u0002\u0002\u0002\u0171\u0174\u0003\u0002\u0002\u0002\u0172\u0170\u0003",
    "\u0002\u0002\u0002\u0173\u0175\u0007G\u0002\u0002\u0174\u0173\u0003",
    "\u0002\u0002\u0002\u0174\u0175\u0003\u0002\u0002\u0002\u0175\u0177\u0003",
    "\u0002\u0002\u0002\u0176\u016b\u0003\u0002\u0002\u0002\u0176\u0177\u0003",
    "\u0002\u0002\u0002\u0177\u0178\u0003\u0002\u0002\u0002\u0178\u0179\u0007",
    "C\u0002\u0002\u0179)\u0003\u0002\u0002\u0002\u017a\u017f\u0005.\u0018",
    "\u0002\u017b\u017c\u0007H\u0002\u0002\u017c\u017e\u0005.\u0018\u0002",
    "\u017d\u017b\u0003\u0002\u0002\u0002\u017e\u0181\u0003\u0002\u0002\u0002",
    "\u017f\u017d\u0003\u0002\u0002\u0002\u017f\u0180\u0003\u0002\u0002\u0002",
    "\u0180\u0182\u0003\u0002\u0002\u0002\u0181\u017f\u0003\u0002\u0002\u0002",
    "\u0182\u0183\u0005,\u0017\u0002\u0183+\u0003\u0002\u0002\u0002\u0184",
    "\u0185\u0007D\u0002\u0002\u0185\u0187\u0007E\u0002\u0002\u0186\u0184",
    "\u0003\u0002\u0002\u0002\u0187\u018a\u0003\u0002\u0002\u0002\u0188\u0186",
    "\u0003\u0002\u0002\u0002\u0188\u0189\u0003\u0002\u0002\u0002\u0189-",
    "\u0003\u0002\u0002\u0002\u018a\u0188\u0003\u0002\u0002\u0002\u018b\u018d",
    "\u0005\u00a6T\u0002\u018c\u018e\u00050\u0019\u0002\u018d\u018c\u0003",
    "\u0002\u0002\u0002\u018d\u018e\u0003\u0002\u0002\u0002\u018e/\u0003",
    "\u0002\u0002\u0002\u018f\u0190\u0007M\u0002\u0002\u0190\u0191\u0005",
    "\u000e\b\u0002\u0191\u0192\u0007L\u0002\u0002\u01921\u0003\u0002\u0002",
    "\u0002\u0193\u0195\u0007@\u0002\u0002\u0194\u0196\u00054\u001b\u0002",
    "\u0195\u0194\u0003\u0002\u0002\u0002\u0195\u0196\u0003\u0002\u0002\u0002",
    "\u0196\u0197\u0003\u0002\u0002\u0002\u0197\u0198\u0007A\u0002\u0002",
    "\u01983\u0003\u0002\u0002\u0002\u0199\u019e\u00056\u001c\u0002\u019a",
    "\u019b\u0007G\u0002\u0002\u019b\u019d\u00056\u001c\u0002\u019c\u019a",
    "\u0003\u0002\u0002\u0002\u019d\u01a0\u0003\u0002\u0002\u0002\u019e\u019c",
    "\u0003\u0002\u0002\u0002\u019e\u019f\u0003\u0002\u0002\u0002\u019f5",
    "\u0003\u0002\u0002\u0002\u01a0\u019e\u0003\u0002\u0002\u0002\u01a1\u01a3",
    "\u0005\u0016\f\u0002\u01a2\u01a1\u0003\u0002\u0002\u0002\u01a3\u01a6",
    "\u0003\u0002\u0002\u0002\u01a4\u01a2\u0003\u0002\u0002\u0002\u01a4\u01a5",
    "\u0003\u0002\u0002\u0002\u01a5\u01a7\u0003\u0002\u0002\u0002\u01a6\u01a4",
    "\u0003\u0002\u0002\u0002\u01a7\u01a8\u0005*\u0016\u0002\u01a8\u01a9",
    "\u0005\u00a6T\u0002\u01a97\u0003\u0002\u0002\u0002\u01aa\u01af\u0005",
    "\u00a6T\u0002\u01ab\u01ac\u0007H\u0002\u0002\u01ac\u01ae\u0005\u00a6",
    "T\u0002\u01ad\u01ab\u0003\u0002\u0002\u0002\u01ae\u01b1\u0003\u0002",
    "\u0002\u0002\u01af\u01ad\u0003\u0002\u0002\u0002\u01af\u01b0\u0003\u0002",
    "\u0002\u0002\u01b09\u0003\u0002\u0002\u0002\u01b1\u01af\u0003\u0002",
    "\u0002\u0002\u01b2\u01b3\t\u0002\u0002\u0002\u01b3;\u0003\u0002\u0002",
    "\u0002\u01b4\u01b5\u0007p\u0002\u0002\u01b5\u01bc\u00058\u001d\u0002",
    "\u01b6\u01b9\u0007@\u0002\u0002\u01b7\u01ba\u0005> \u0002\u01b8\u01ba",
    "\u0005B\"\u0002\u01b9\u01b7\u0003\u0002\u0002\u0002\u01b9\u01b8\u0003",
    "\u0002\u0002\u0002\u01b9\u01ba\u0003\u0002\u0002\u0002\u01ba\u01bb\u0003",
    "\u0002\u0002\u0002\u01bb\u01bd\u0007A\u0002\u0002\u01bc\u01b6\u0003",
    "\u0002\u0002\u0002\u01bc\u01bd\u0003\u0002\u0002\u0002\u01bd=\u0003",
    "\u0002\u0002\u0002\u01be\u01c5\u0005@!\u0002\u01bf\u01c1\u0007G\u0002",
    "\u0002\u01c0\u01bf\u0003\u0002\u0002\u0002\u01c0\u01c1\u0003\u0002\u0002",
    "\u0002\u01c1\u01c2\u0003\u0002\u0002\u0002\u01c2\u01c4\u0005@!\u0002",
    "\u01c3\u01c0\u0003\u0002\u0002\u0002\u01c4\u01c7\u0003\u0002\u0002\u0002",
    "\u01c5\u01c3\u0003\u0002\u0002\u0002\u01c5\u01c6\u0003\u0002\u0002\u0002",
    "\u01c6?\u0003\u0002\u0002\u0002\u01c7\u01c5\u0003\u0002\u0002\u0002",
    "\u01c8\u01c9\u0005\u00a6T\u0002\u01c9\u01ca\u0007I\u0002\u0002\u01ca",
    "\u01cb\u0005B\"\u0002\u01cbA\u0003\u0002\u0002\u0002\u01cc\u01d0\u0005",
    "\u008aF\u0002\u01cd\u01d0\u0005<\u001f\u0002\u01ce\u01d0\u0005D#\u0002",
    "\u01cf\u01cc\u0003\u0002\u0002\u0002\u01cf\u01cd\u0003\u0002\u0002\u0002",
    "\u01cf\u01ce\u0003\u0002\u0002\u0002\u01d0C\u0003\u0002\u0002\u0002",
    "\u01d1\u01da\u0007B\u0002\u0002\u01d2\u01d7\u0005B\"\u0002\u01d3\u01d4",
    "\u0007G\u0002\u0002\u01d4\u01d6\u0005B\"\u0002\u01d5\u01d3\u0003\u0002",
    "\u0002\u0002\u01d6\u01d9\u0003\u0002\u0002\u0002\u01d7\u01d5\u0003\u0002",
    "\u0002\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u01db\u0003\u0002",
    "\u0002\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01da\u01d2\u0003\u0002",
    "\u0002\u0002\u01da\u01db\u0003\u0002\u0002\u0002\u01db\u01dd\u0003\u0002",
    "\u0002\u0002\u01dc\u01de\u0007G\u0002\u0002\u01dd\u01dc\u0003\u0002",
    "\u0002\u0002\u01dd\u01de\u0003\u0002\u0002\u0002\u01de\u01df\u0003\u0002",
    "\u0002\u0002\u01df\u01e0\u0007C\u0002\u0002\u01e0E\u0003\u0002\u0002",
    "\u0002\u01e1\u01e5\u0007B\u0002\u0002\u01e2\u01e4\u0005L\'\u0002\u01e3",
    "\u01e2\u0003\u0002\u0002\u0002\u01e4\u01e7\u0003\u0002\u0002\u0002\u01e5",
    "\u01e3\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6",
    "\u01e8\u0003\u0002\u0002\u0002\u01e7\u01e5\u0003\u0002\u0002\u0002\u01e8",
    "\u01e9\u0007C\u0002\u0002\u01e9G\u0003\u0002\u0002\u0002\u01ea\u01eb",
    "\u0005J&\u0002\u01eb\u01ec\u0007F\u0002\u0002\u01ecI\u0003\u0002\u0002",
    "\u0002\u01ed\u01ef\u0005\u0016\f\u0002\u01ee\u01ed\u0003\u0002\u0002",
    "\u0002\u01ef\u01f2\u0003\u0002\u0002\u0002\u01f0\u01ee\u0003\u0002\u0002",
    "\u0002\u01f0\u01f1\u0003\u0002\u0002\u0002\u01f1\u01f3\u0003\u0002\u0002",
    "\u0002\u01f2\u01f0\u0003\u0002\u0002\u0002\u01f3\u01f4\u0005*\u0016",
    "\u0002\u01f4\u01f5\u0005$\u0013\u0002\u01f5K\u0003\u0002\u0002\u0002",
    "\u01f6\u020b\u0005F$\u0002\u01f7\u020b\u0005N(\u0002\u01f8\u020b\u0005",
    "P)\u0002\u01f9\u020b\u0005T+\u0002\u01fa\u020b\u0005V,\u0002\u01fb\u020b",
    "\u0005X-\u0002\u01fc\u020b\u0005Z.\u0002\u01fd\u020b\u0005\\/\u0002",
    "\u01fe\u020b\u0005^0\u0002\u01ff\u020b\u0005`1\u0002\u0200\u020b\u0005",
    "b2\u0002\u0201\u020b\u0005d3\u0002\u0202\u020b\u0005f4\u0002\u0203\u020b",
    "\u0005h5\u0002\u0204\u020b\u0005j6\u0002\u0205\u020b\u0005l7\u0002\u0206",
    "\u020b\u0005n8\u0002\u0207\u020b\u0005p9\u0002\u0208\u020b\u0005H%\u0002",
    "\u0209\u020b\u0005r:\u0002\u020a\u01f6\u0003\u0002\u0002\u0002\u020a",
    "\u01f7\u0003\u0002\u0002\u0002\u020a\u01f8\u0003\u0002\u0002\u0002\u020a",
    "\u01f9\u0003\u0002\u0002\u0002\u020a\u01fa\u0003\u0002\u0002\u0002\u020a",
    "\u01fb\u0003\u0002\u0002\u0002\u020a\u01fc\u0003\u0002\u0002\u0002\u020a",
    "\u01fd\u0003\u0002\u0002\u0002\u020a\u01fe\u0003\u0002\u0002\u0002\u020a",
    "\u01ff\u0003\u0002\u0002\u0002\u020a\u0200\u0003\u0002\u0002\u0002\u020a",
    "\u0201\u0003\u0002\u0002\u0002\u020a\u0202\u0003\u0002\u0002\u0002\u020a",
    "\u0203\u0003\u0002\u0002\u0002\u020a\u0204\u0003\u0002\u0002\u0002\u020a",
    "\u0205\u0003\u0002\u0002\u0002\u020a\u0206\u0003\u0002\u0002\u0002\u020a",
    "\u0207\u0003\u0002\u0002\u0002\u020a\u0208\u0003\u0002\u0002\u0002\u020a",
    "\u0209\u0003\u0002\u0002\u0002\u020bM\u0003\u0002\u0002\u0002\u020c",
    "\u020d\u0007\u0016\u0002\u0002\u020d\u020e\u0005\u0086D\u0002\u020e",
    "\u0211\u0005L\'\u0002\u020f\u0210\u0007\u000e\u0002\u0002\u0210\u0212",
    "\u0005L\'\u0002\u0211\u020f\u0003\u0002\u0002\u0002\u0211\u0212\u0003",
    "\u0002\u0002\u0002\u0212O\u0003\u0002\u0002\u0002\u0213\u0214\u0007",
    "+\u0002\u0002\u0214\u0215\u0007\u001f\u0002\u0002\u0215\u0216\u0005",
    "\u008aF\u0002\u0216\u0218\u0007B\u0002\u0002\u0217\u0219\u0005R*\u0002",
    "\u0218\u0217\u0003\u0002\u0002\u0002\u0219\u021a\u0003\u0002\u0002\u0002",
    "\u021a\u0218\u0003\u0002\u0002\u0002\u021a\u021b\u0003\u0002\u0002\u0002",
    "\u021b\u021c\u0003\u0002\u0002\u0002\u021c\u021d\u0007C\u0002\u0002",
    "\u021dQ\u0003\u0002\u0002\u0002\u021e\u0221\u00077\u0002\u0002\u021f",
    "\u0222\u0007\u000e\u0002\u0002\u0220\u0222\u0005\u0088E\u0002\u0221",
    "\u021f\u0003\u0002\u0002\u0002\u0221\u0220\u0003\u0002\u0002\u0002\u0222",
    "\u0223\u0003\u0002\u0002\u0002\u0223\u0224\u0005F$\u0002\u0224S\u0003",
    "\u0002\u0002\u0002\u0225\u0226\u0007\u0013\u0002\u0002\u0226\u0227\u0007",
    "@\u0002\u0002\u0227\u0228\u0005~@\u0002\u0228\u0229\u0007A\u0002\u0002",
    "\u0229\u022a\u0005L\'\u0002\u022aU\u0003\u0002\u0002\u0002\u022b\u022c",
    "\u00078\u0002\u0002\u022c\u022d\u0005\u0086D\u0002\u022d\u022e\u0005",
    "L\'\u0002\u022eW\u0003\u0002\u0002\u0002\u022f\u0230\u0007\r\u0002\u0002",
    "\u0230\u0231\u0005L\'\u0002\u0231\u0232\u00078\u0002\u0002\u0232\u0233",
    "\u0005\u0086D\u0002\u0233\u0234\u0007F\u0002\u0002\u0234Y\u0003\u0002",
    "\u0002\u0002\u0235\u0236\u00070\u0002\u0002\u0236\u0240\u0005F$\u0002",
    "\u0237\u0239\u0005z>\u0002\u0238\u0237\u0003\u0002\u0002\u0002\u0239",
    "\u023a\u0003\u0002\u0002\u0002\u023a\u0238\u0003\u0002\u0002\u0002\u023a",
    "\u023b\u0003\u0002\u0002\u0002\u023b\u023d\u0003\u0002\u0002\u0002\u023c",
    "\u023e\u0005|?\u0002\u023d\u023c\u0003\u0002\u0002\u0002\u023d\u023e",
    "\u0003\u0002\u0002\u0002\u023e\u0241\u0003\u0002\u0002\u0002\u023f\u0241",
    "\u0005|?\u0002\u0240\u0238\u0003\u0002\u0002\u0002\u0240\u023f\u0003",
    "\u0002\u0002\u0002\u0241[\u0003\u0002\u0002\u0002\u0242\u0244\u0007",
    "$\u0002\u0002\u0243\u0245\u0005\u008aF\u0002\u0244\u0243\u0003\u0002",
    "\u0002\u0002\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u0246\u0003\u0002",
    "\u0002\u0002\u0246\u0247\u0007F\u0002\u0002\u0247]\u0003\u0002\u0002",
    "\u0002\u0248\u0249\u0007.\u0002\u0002\u0249\u024a\u0005\u008aF\u0002",
    "\u024a\u024b\u0007F\u0002\u0002\u024b_\u0003\u0002\u0002\u0002\u024c",
    "\u024d\u0007\u0004\u0002\u0002\u024d\u024e\u0007F\u0002\u0002\u024e",
    "a\u0003\u0002\u0002\u0002\u024f\u0250\u0007\n\u0002\u0002\u0250\u0251",
    "\u0007F\u0002\u0002\u0251c\u0003\u0002\u0002\u0002\u0252\u0253\u0007",
    "\u0019\u0002\u0002\u0253\u0254\u0005\u008aF\u0002\u0254\u0255\u0007",
    "F\u0002\u0002\u0255e\u0003\u0002\u0002\u0002\u0256\u0257\u00072\u0002",
    "\u0002\u0257\u0258\u0005\u008aF\u0002\u0258\u0259\u0007F\u0002\u0002",
    "\u0259g\u0003\u0002\u0002\u0002\u025a\u025b\u0007\f\u0002\u0002\u025b",
    "\u025c\u0005\u008aF\u0002\u025c\u025d\u0007F\u0002\u0002\u025di\u0003",
    "\u0002\u0002\u0002\u025e\u025f\u00071\u0002\u0002\u025f\u0260\u0005",
    "\u008aF\u0002\u0260\u0261\u0007F\u0002\u0002\u0261k\u0003\u0002\u0002",
    "\u0002\u0262\u0263\u00073\u0002\u0002\u0263\u0265\u0005\u008aF\u0002",
    "\u0264\u0266\u00058\u001d\u0002\u0265\u0264\u0003\u0002\u0002\u0002",
    "\u0265\u0266\u0003\u0002\u0002\u0002\u0266\u0267\u0003\u0002\u0002\u0002",
    "\u0267\u0268\u0007F\u0002\u0002\u0268m\u0003\u0002\u0002\u0002\u0269",
    "\u026a\u0007\u001c\u0002\u0002\u026a\u026b\u0005\u008aF\u0002\u026b",
    "\u026c\u0005\u008aF\u0002\u026c\u026d\u0007F\u0002\u0002\u026do\u0003",
    "\u0002\u0002\u0002\u026e\u026f\u0007%\u0002\u0002\u026f\u0271\u0007",
    "@\u0002\u0002\u0270\u0272\u0005\u0088E\u0002\u0271\u0270\u0003\u0002",
    "\u0002\u0002\u0271\u0272\u0003\u0002\u0002\u0002\u0272\u0273\u0003\u0002",
    "\u0002\u0002\u0273\u0275\u0007A\u0002\u0002\u0274\u0276\u0005F$\u0002",
    "\u0275\u0274\u0003\u0002\u0002\u0002\u0275\u0276\u0003\u0002\u0002\u0002",
    "\u0276q\u0003\u0002\u0002\u0002\u0277\u0278\u0005\u008aF\u0002\u0278",
    "\u0279\u0007F\u0002\u0002\u0279s\u0003\u0002\u0002\u0002\u027a\u027c",
    "\u0005\u0016\f\u0002\u027b\u027a\u0003\u0002\u0002\u0002\u027c\u027f",
    "\u0003\u0002\u0002\u0002\u027d\u027b\u0003\u0002\u0002\u0002\u027d\u027e",
    "\u0003\u0002\u0002\u0002\u027e\u0282\u0003\u0002\u0002\u0002\u027f\u027d",
    "\u0003\u0002\u0002\u0002\u0280\u0283\u0005v<\u0002\u0281\u0283\u0005",
    "x=\u0002\u0282\u0280\u0003\u0002\u0002\u0002\u0282\u0281\u0003\u0002",
    "\u0002\u0002\u0283u\u0003\u0002\u0002\u0002\u0284\u0287\u0007\u0014",
    "\u0002\u0002\u0285\u0288\u0007F\u0002\u0002\u0286\u0288\u0005F$\u0002",
    "\u0287\u0285\u0003\u0002\u0002\u0002\u0287\u0286\u0003\u0002\u0002\u0002",
    "\u0288w\u0003\u0002\u0002\u0002\u0289\u028c\u0007&\u0002\u0002\u028a",
    "\u028d\u0007F\u0002\u0002\u028b\u028d\u0005F$\u0002\u028c\u028a\u0003",
    "\u0002\u0002\u0002\u028c\u028b\u0003\u0002\u0002\u0002\u028dy\u0003",
    "\u0002\u0002\u0002\u028e\u028f\u0007\u0006\u0002\u0002\u028f\u0293\u0007",
    "@\u0002\u0002\u0290\u0292\u0005\u0016\f\u0002\u0291\u0290\u0003\u0002",
    "\u0002\u0002\u0292\u0295\u0003\u0002\u0002\u0002\u0293\u0291\u0003\u0002",
    "\u0002\u0002\u0293\u0294\u0003\u0002\u0002\u0002\u0294\u0296\u0003\u0002",
    "\u0002\u0002\u0295\u0293\u0003\u0002\u0002\u0002\u0296\u0297\u00058",
    "\u001d\u0002\u0297\u0298\u0005\u00a6T\u0002\u0298\u0299\u0007A\u0002",
    "\u0002\u0299\u029a\u0005F$\u0002\u029a{\u0003\u0002\u0002\u0002\u029b",
    "\u029c\u0007\u0012\u0002\u0002\u029c\u029d\u0005F$\u0002\u029d}\u0003",
    "\u0002\u0002\u0002\u029e\u02ab\u0005\u0082B\u0002\u029f\u02a1\u0005",
    "\u0080A\u0002\u02a0\u029f\u0003\u0002\u0002\u0002\u02a0\u02a1\u0003",
    "\u0002\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2\u02a4\u0007",
    "F\u0002\u0002\u02a3\u02a5\u0005\u008aF\u0002\u02a4\u02a3\u0003\u0002",
    "\u0002\u0002\u02a4\u02a5\u0003\u0002\u0002\u0002\u02a5\u02a6\u0003\u0002",
    "\u0002\u0002\u02a6\u02a8\u0007F\u0002\u0002\u02a7\u02a9\u0005\u0084",
    "C\u0002\u02a8\u02a7\u0003\u0002\u0002\u0002\u02a8\u02a9\u0003\u0002",
    "\u0002\u0002\u02a9\u02ab\u0003\u0002\u0002\u0002\u02aa\u029e\u0003\u0002",
    "\u0002\u0002\u02aa\u02a0\u0003\u0002\u0002\u0002\u02ab\u007f\u0003\u0002",
    "\u0002\u0002\u02ac\u02af\u0005J&\u0002\u02ad\u02af\u0005\u0088E\u0002",
    "\u02ae\u02ac\u0003\u0002\u0002\u0002\u02ae\u02ad\u0003\u0002\u0002\u0002",
    "\u02af\u0081\u0003\u0002\u0002\u0002\u02b0\u02b2\u0005\u0016\f\u0002",
    "\u02b1\u02b0\u0003\u0002\u0002\u0002\u02b2\u02b5\u0003\u0002\u0002\u0002",
    "\u02b3\u02b1\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002\u0002\u0002",
    "\u02b4\u02b6\u0003\u0002\u0002\u0002\u02b5\u02b3\u0003\u0002\u0002\u0002",
    "\u02b6\u02b7\u0005*\u0016\u0002\u02b7\u02b8\u0005\u00a6T\u0002\u02b8",
    "\u02b9\u0007Q\u0002\u0002\u02b9\u02ba\u0005\u008aF\u0002\u02ba\u0083",
    "\u0003\u0002\u0002\u0002\u02bb\u02bc\u0005\u0088E\u0002\u02bc\u0085",
    "\u0003\u0002\u0002\u0002\u02bd\u02be\u0007@\u0002\u0002\u02be\u02bf",
    "\u0005\u008aF\u0002\u02bf\u02c0\u0007A\u0002\u0002\u02c0\u0087\u0003",
    "\u0002\u0002\u0002\u02c1\u02c6\u0005\u008aF\u0002\u02c2\u02c3\u0007",
    "G\u0002\u0002\u02c3\u02c5\u0005\u008aF\u0002\u02c4\u02c2\u0003\u0002",
    "\u0002\u0002\u02c5\u02c8\u0003\u0002\u0002\u0002\u02c6\u02c4\u0003\u0002",
    "\u0002\u0002\u02c6\u02c7\u0003\u0002\u0002\u0002\u02c7\u0089\u0003\u0002",
    "\u0002\u0002\u02c8\u02c6\u0003\u0002\u0002\u0002\u02c9\u02ca\bF\u0001",
    "\u0002\u02ca\u02d8\u0005\u008cG\u0002\u02cb\u02d8\u0005\u008eH\u0002",
    "\u02cc\u02cd\u0007\u001d\u0002\u0002\u02cd\u02d8\u0005\u0090I\u0002",
    "\u02ce\u02cf\u0007@\u0002\u0002\u02cf\u02d0\u0005*\u0016\u0002\u02d0",
    "\u02d1\u0007A\u0002\u0002\u02d1\u02d2\u0005\u008aF\u0013\u02d2\u02d8",
    "\u0003\u0002\u0002\u0002\u02d3\u02d4\t\u0003\u0002\u0002\u02d4\u02d8",
    "\u0005\u008aF\u0011\u02d5\u02d6\t\u0004\u0002\u0002\u02d6\u02d8\u0005",
    "\u008aF\u0010\u02d7\u02c9\u0003\u0002\u0002\u0002\u02d7\u02cb\u0003",
    "\u0002\u0002\u0002\u02d7\u02cc\u0003\u0002\u0002\u0002\u02d7\u02ce\u0003",
    "\u0002\u0002\u0002\u02d7\u02d3\u0003\u0002\u0002\u0002\u02d7\u02d5\u0003",
    "\u0002\u0002\u0002\u02d8\u0323\u0003\u0002\u0002\u0002\u02d9\u02da\f",
    "\u000f\u0002\u0002\u02da\u02db\t\u0005\u0002\u0002\u02db\u0322\u0005",
    "\u008aF\u0010\u02dc\u02dd\f\u000e\u0002\u0002\u02dd\u02de\t\u0006\u0002",
    "\u0002\u02de\u0322\u0005\u008aF\u000f\u02df\u02e7\f\r\u0002\u0002\u02e0",
    "\u02e1\u0007M\u0002\u0002\u02e1\u02e8\u0007M\u0002\u0002\u02e2\u02e3",
    "\u0007L\u0002\u0002\u02e3\u02e4\u0007L\u0002\u0002\u02e4\u02e8\u0007",
    "L\u0002\u0002\u02e5\u02e6\u0007L\u0002\u0002\u02e6\u02e8\u0007L\u0002",
    "\u0002\u02e7\u02e0\u0003\u0002\u0002\u0002\u02e7\u02e2\u0003\u0002\u0002",
    "\u0002\u02e7\u02e5\u0003\u0002\u0002\u0002\u02e8\u02e9\u0003\u0002\u0002",
    "\u0002\u02e9\u0322\u0005\u008aF\u000e\u02ea\u02f3\f\f\u0002\u0002\u02eb",
    "\u02ec\u0007M\u0002\u0002\u02ec\u02f4\u0007I\u0002\u0002\u02ed\u02ee",
    "\u0007L\u0002\u0002\u02ee\u02f4\u0007I\u0002\u0002\u02ef\u02f4\u0007",
    "J\u0002\u0002\u02f0\u02f4\u0007K\u0002\u0002\u02f1\u02f4\u0007L\u0002",
    "\u0002\u02f2\u02f4\u0007M\u0002\u0002\u02f3\u02eb\u0003\u0002\u0002",
    "\u0002\u02f3\u02ed\u0003\u0002\u0002\u0002\u02f3\u02ef\u0003\u0002\u0002",
    "\u0002\u02f3\u02f0\u0003\u0002\u0002\u0002\u02f3\u02f1\u0003\u0002\u0002",
    "\u0002\u02f3\u02f2\u0003\u0002\u0002\u0002\u02f4\u02f5\u0003\u0002\u0002",
    "\u0002\u02f5\u0322\u0005\u008aF\r\u02f6\u02f7\f\n\u0002\u0002\u02f7",
    "\u02f8\t\u0007\u0002\u0002\u02f8\u0322\u0005\u008aF\u000b\u02f9\u02fa",
    "\f\t\u0002\u0002\u02fa\u02fb\u0007_\u0002\u0002\u02fb\u0322\u0005\u008a",
    "F\n\u02fc\u02fd\f\b\u0002\u0002\u02fd\u02fe\u0007a\u0002\u0002\u02fe",
    "\u0322\u0005\u008aF\t\u02ff\u0300\f\u0007\u0002\u0002\u0300\u0301\u0007",
    "`\u0002\u0002\u0301\u0322\u0005\u008aF\b\u0302\u0303\f\u0006\u0002\u0002",
    "\u0303\u0304\u0007W\u0002\u0002\u0304\u0322\u0005\u008aF\u0007\u0305",
    "\u0306\f\u0005\u0002\u0002\u0306\u0307\u0007X\u0002\u0002\u0307\u0322",
    "\u0005\u008aF\u0006\u0308\u0309\f\u0004\u0002\u0002\u0309\u030a\u0007",
    "P\u0002\u0002\u030a\u030b\u0005\u008aF\u0002\u030b\u030c\u0007Q\u0002",
    "\u0002\u030c\u030d\u0005\u008aF\u0004\u030d\u0322\u0003\u0002\u0002",
    "\u0002\u030e\u030f\f\u0003\u0002\u0002\u030f\u0310\t\b\u0002\u0002\u0310",
    "\u0322\u0005\u008aF\u0003\u0311\u0312\f\u0017\u0002\u0002\u0312\u0315",
    "\u0007H\u0002\u0002\u0313\u0316\u0005\u00a6T\u0002\u0314\u0316\u0005",
    "\u008eH\u0002\u0315\u0313\u0003\u0002\u0002\u0002\u0315\u0314\u0003",
    "\u0002\u0002\u0002\u0316\u0322\u0003\u0002\u0002\u0002\u0317\u0318\f",
    "\u0016\u0002\u0002\u0318\u0319\u0007D\u0002\u0002\u0319\u031a\u0005",
    "\u008aF\u0002\u031a\u031b\u0007E\u0002\u0002\u031b\u0322\u0003\u0002",
    "\u0002\u0002\u031c\u031d\f\u0012\u0002\u0002\u031d\u0322\t\t\u0002\u0002",
    "\u031e\u031f\f\u000b\u0002\u0002\u031f\u0320\u0007\u001a\u0002\u0002",
    "\u0320\u0322\u0005*\u0016\u0002\u0321\u02d9\u0003\u0002\u0002\u0002",
    "\u0321\u02dc\u0003\u0002\u0002\u0002\u0321\u02df\u0003\u0002\u0002\u0002",
    "\u0321\u02ea\u0003\u0002\u0002\u0002\u0321\u02f6\u0003\u0002\u0002\u0002",
    "\u0321\u02f9\u0003\u0002\u0002\u0002\u0321\u02fc\u0003\u0002\u0002\u0002",
    "\u0321\u02ff\u0003\u0002\u0002\u0002\u0321\u0302\u0003\u0002\u0002\u0002",
    "\u0321\u0305\u0003\u0002\u0002\u0002\u0321\u0308\u0003\u0002\u0002\u0002",
    "\u0321\u030e\u0003\u0002\u0002\u0002\u0321\u0311\u0003\u0002\u0002\u0002",
    "\u0321\u0317\u0003\u0002\u0002\u0002\u0321\u031c\u0003\u0002\u0002\u0002",
    "\u0321\u031e\u0003\u0002\u0002\u0002\u0322\u0325\u0003\u0002\u0002\u0002",
    "\u0323\u0321\u0003\u0002\u0002\u0002\u0323\u0324\u0003\u0002\u0002\u0002",
    "\u0324\u008b\u0003\u0002\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002",
    "\u0326\u0327\u0007@\u0002\u0002\u0327\u0328\u0005\u008aF\u0002\u0328",
    "\u0329\u0007A\u0002\u0002\u0329\u0334\u0003\u0002\u0002\u0002\u032a",
    "\u0334\u0007-\u0002\u0002\u032b\u0334\u0007*\u0002\u0002\u032c\u0334",
    "\u0005:\u001e\u0002\u032d\u032e\u0005*\u0016\u0002\u032e\u032f\u0007",
    "H\u0002\u0002\u032f\u0330\u0007\b\u0002\u0002\u0330\u0334\u0003\u0002",
    "\u0002\u0002\u0331\u0334\u0005\u00a6T\u0002\u0332\u0334\u0005\u00a4",
    "S\u0002\u0333\u0326\u0003\u0002\u0002\u0002\u0333\u032a\u0003\u0002",
    "\u0002\u0002\u0333\u032b\u0003\u0002\u0002\u0002\u0333\u032c\u0003\u0002",
    "\u0002\u0002\u0333\u032d\u0003\u0002\u0002\u0002\u0333\u0331\u0003\u0002",
    "\u0002\u0002\u0333\u0332\u0003\u0002\u0002\u0002\u0334\u008d\u0003\u0002",
    "\u0002\u0002\u0335\u0336\u0005\u00a6T\u0002\u0336\u0338\u0007@\u0002",
    "\u0002\u0337\u0339\u0005\u0088E\u0002\u0338\u0337\u0003\u0002\u0002",
    "\u0002\u0338\u0339\u0003\u0002\u0002\u0002\u0339\u033a\u0003\u0002\u0002",
    "\u0002\u033a\u033b\u0007A\u0002\u0002\u033b\u0349\u0003\u0002\u0002",
    "\u0002\u033c\u033d\u0007-\u0002\u0002\u033d\u033f\u0007@\u0002\u0002",
    "\u033e\u0340\u0005\u0088E\u0002\u033f\u033e\u0003\u0002\u0002\u0002",
    "\u033f\u0340\u0003\u0002\u0002\u0002\u0340\u0341\u0003\u0002\u0002\u0002",
    "\u0341\u0349\u0007A\u0002\u0002\u0342\u0343\u0007*\u0002\u0002\u0343",
    "\u0345\u0007@\u0002\u0002\u0344\u0346\u0005\u0088E\u0002\u0345\u0344",
    "\u0003\u0002\u0002\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u0347",
    "\u0003\u0002\u0002\u0002\u0347\u0349\u0007A\u0002\u0002\u0348\u0335",
    "\u0003\u0002\u0002\u0002\u0348\u033c\u0003\u0002\u0002\u0002\u0348\u0342",
    "\u0003\u0002\u0002\u0002\u0349\u008f\u0003\u0002\u0002\u0002\u034a\u0350",
    "\u0005\u0092J\u0002\u034b\u0351\u0005\u0096L\u0002\u034c\u0351\u0005",
    "\u0098M\u0002\u034d\u0351\u0005\u009aN\u0002\u034e\u0351\u0005\u009c",
    "O\u0002\u034f\u0351\u0005\u00a0Q\u0002\u0350\u034b\u0003\u0002\u0002",
    "\u0002\u0350\u034c\u0003\u0002\u0002\u0002\u0350\u034d\u0003\u0002\u0002",
    "\u0002\u0350\u034e\u0003\u0002\u0002\u0002\u0350\u034f\u0003\u0002\u0002",
    "\u0002\u0351\u0091\u0003\u0002\u0002\u0002\u0352\u0357\u0005\u0094K",
    "\u0002\u0353\u0354\u0007H\u0002\u0002\u0354\u0356\u0005\u0094K\u0002",
    "\u0355\u0353\u0003\u0002\u0002\u0002\u0356\u0359\u0003\u0002\u0002\u0002",
    "\u0357\u0355\u0003\u0002\u0002\u0002\u0357\u0358\u0003\u0002\u0002\u0002",
    "\u0358\u0093\u0003\u0002\u0002\u0002\u0359\u0357\u0003\u0002\u0002\u0002",
    "\u035a\u035f\u0005\u00a6T\u0002\u035b\u035c\u0007M\u0002\u0002\u035c",
    "\u035d\u0005\u000e\b\u0002\u035d\u035e\u0007L\u0002\u0002\u035e\u0360",
    "\u0003\u0002\u0002\u0002\u035f\u035b\u0003\u0002\u0002\u0002\u035f\u0360",
    "\u0003\u0002\u0002\u0002\u0360\u0095\u0003\u0002\u0002\u0002\u0361\u0362",
    "\u0007B\u0002\u0002\u0362\u0363\u0007C\u0002\u0002\u0363\u0097\u0003",
    "\u0002\u0002\u0002\u0364\u0365\u0005\u00a2R\u0002\u0365\u0099\u0003",
    "\u0002\u0002\u0002\u0366\u0367\u0007D\u0002\u0002\u0367\u0368\u0005",
    "\u008aF\u0002\u0368\u0369\u0007E\u0002\u0002\u0369\u0370\u0003\u0002",
    "\u0002\u0002\u036a\u036b\u0007D\u0002\u0002\u036b\u036d\u0007E\u0002",
    "\u0002\u036c\u036e\u0005(\u0015\u0002\u036d\u036c\u0003\u0002\u0002",
    "\u0002\u036d\u036e\u0003\u0002\u0002\u0002\u036e\u0370\u0003\u0002\u0002",
    "\u0002\u036f\u0366\u0003\u0002\u0002\u0002\u036f\u036a\u0003\u0002\u0002",
    "\u0002\u0370\u009b\u0003\u0002\u0002\u0002\u0371\u0372\u0007B\u0002",
    "\u0002\u0372\u0377\u0005\u009eP\u0002\u0373\u0374\u0007G\u0002\u0002",
    "\u0374\u0376\u0005\u009eP\u0002\u0375\u0373\u0003\u0002\u0002\u0002",
    "\u0376\u0379\u0003\u0002\u0002\u0002\u0377\u0375\u0003\u0002\u0002\u0002",
    "\u0377\u0378\u0003\u0002\u0002\u0002\u0378\u037a\u0003\u0002\u0002\u0002",
    "\u0379\u0377\u0003\u0002\u0002\u0002\u037a\u037b\u0007C\u0002\u0002",
    "\u037b\u009d\u0003\u0002\u0002\u0002\u037c\u037d\u0005\u008aF\u0002",
    "\u037d\u037e\u0007c\u0002\u0002\u037e\u037f\u0005\u008aF\u0002\u037f",
    "\u009f\u0003\u0002\u0002\u0002\u0380\u0381\u0007B\u0002\u0002\u0381",
    "\u0386\u0005\u008aF\u0002\u0382\u0383\u0007G\u0002\u0002\u0383\u0385",
    "\u0005\u008aF\u0002\u0384\u0382\u0003\u0002\u0002\u0002\u0385\u0388",
    "\u0003\u0002\u0002\u0002\u0386\u0384\u0003\u0002\u0002\u0002\u0386\u0387",
    "\u0003\u0002\u0002\u0002\u0387\u0389\u0003\u0002\u0002\u0002\u0388\u0386",
    "\u0003\u0002\u0002\u0002\u0389\u038a\u0007C\u0002\u0002\u038a\u00a1",
    "\u0003\u0002\u0002\u0002\u038b\u038d\u0007@\u0002\u0002\u038c\u038e",
    "\u0005\u0088E\u0002\u038d\u038c\u0003\u0002\u0002\u0002\u038d\u038e",
    "\u0003\u0002\u0002\u0002\u038e\u038f\u0003\u0002\u0002\u0002\u038f\u0390",
    "\u0007A\u0002\u0002\u0390\u00a3\u0003\u0002\u0002\u0002\u0391\u0396",
    "\u0007D\u0002\u0002\u0392\u0395\u0005\u00a4S\u0002\u0393\u0395\n\n\u0002",
    "\u0002\u0394\u0392\u0003\u0002\u0002\u0002\u0394\u0393\u0003\u0002\u0002",
    "\u0002\u0395\u0398\u0003\u0002\u0002\u0002\u0396\u0397\u0003\u0002\u0002",
    "\u0002\u0396\u0394\u0003\u0002\u0002\u0002\u0397\u0399\u0003\u0002\u0002",
    "\u0002\u0398\u0396\u0003\u0002\u0002\u0002\u0399\u039a\u0007E\u0002",
    "\u0002\u039a\u00a5\u0003\u0002\u0002\u0002\u039b\u039c\t\u000b\u0002",
    "\u0002\u039c\u00a7\u0003\u0002\u0002\u0002[\u00ae\u00b5\u00bc\u00c0",
    "\u00c6\u00ca\u00d2\u00db\u00e2\u00eb\u00f2\u00fb\u0102\u0108\u010c\u0121",
    "\u012a\u012f\u0134\u013a\u014a\u0152\u0157\u0162\u0168\u0170\u0174\u0176",
    "\u017f\u0188\u018d\u0195\u019e\u01a4\u01af\u01b9\u01bc\u01c0\u01c5\u01cf",
    "\u01d7\u01da\u01dd\u01e5\u01f0\u020a\u0211\u021a\u0221\u023a\u023d\u0240",
    "\u0244\u0265\u0271\u0275\u027d\u0282\u0287\u028c\u0293\u02a0\u02a4\u02a8",
    "\u02aa\u02ae\u02b3\u02c6\u02d7\u02e7\u02f3\u0315\u0321\u0323\u0333\u0338",
    "\u033f\u0345\u0348\u0350\u0357\u035f\u036d\u036f\u0377\u0386\u038d\u0394",
    "\u0396"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'abstract'", "'break'", "'byte'", "'catch'", 
                     "'char'", "'class'", "'const'", "'continue'", "'default'", 
                     "'delete'", "'do'", "'else'", "'enum'", "'extends'", 
                     "'final'", "'finally'", "'for'", "'get'", "'global'", 
                     "'if'", "'implements'", "'inherited'", "'insert'", 
                     "'instanceof'", "'interface'", "'merge'", "'new'", 
                     "'null'", "'on'", "'override'", "'private'", "'protected'", 
                     "'public'", "'return'", "'system.runas'", "'set'", 
                     "'sharing'", "'short'", "'static'", "'super'", "'switch'", 
                     "'testmethod'", "'this'", "'throw'", "'transient'", 
                     "'try'", "'undelete'", "'update'", "'upsert'", "'virtual'", 
                     "'void'", "'webservice'", "'when'", "'while'", "'with'", 
                     "'without'", null, null, null, null, null, "'('", "')'", 
                     "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", "'='", 
                     "'<='", "'>='", "'>'", "'<'", "'!'", "'~'", "'?'", 
                     "':'", "'=='", "'==='", "'!='", "'<>'", "'!=='", "'&&'", 
                     "'||'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", 
                     "'&'", "'|'", "'^'", "'%'", "'=>'", "'+='", "'-='", 
                     "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", 
                     "'>>='", "'>>>='", null, "'@'" ];

var symbolicNames = [ null, "ABSTRACT", "BREAK", "BYTE", "CATCH", "CHAR", 
                      "CLASS", "CONST", "CONTINUE", "DEFAULT", "DELETE", 
                      "DO", "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", 
                      "FOR", "GET", "GLOBAL", "IF", "IMPLEMENTS", "INHERITED", 
                      "INSERT", "INSTANCEOF", "INTERFACE", "MERGE", "NEW", 
                      "NULL", "ON", "OVERRIDE", "PRIVATE", "PROTECTED", 
                      "PUBLIC", "RETURN", "RUNAS", "SET", "SHARING", "SHORT", 
                      "STATIC", "SUPER", "SWITCH", "TESTMETHOD", "THIS", 
                      "THROW", "TRANSIENT", "TRY", "UNDELETE", "UPDATE", 
                      "UPSERT", "VIRTUAL", "VOID", "WEBSERVICE", "WHEN", 
                      "WHILE", "WITH", "WITHOUT", "IntegerLiteral", "NumberLiteral", 
                      "BooleanLiteral", "StringLiteral", "NullLiteral", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                      "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", "LE", 
                      "GE", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", 
                      "EQUAL", "TRIPLEEQUAL", "NOTEQUAL", "LESSANDGREATER", 
                      "TRIPLENOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", 
                      "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", "MOD", 
                      "MAP", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", 
                      "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "Identifier", "AT", "WS", "DOC_COMMENT", "COMMENT", 
                      "LINE_COMMENT" ];

var ruleNames =  [ "compilationUnit", "typeDeclaration", "classDeclaration", 
                   "enumDeclaration", "enumConstants", "interfaceDeclaration", 
                   "typeList", "classBody", "interfaceBody", "classBodyDeclaration", 
                   "modifier", "memberDeclaration", "methodDeclaration", 
                   "constructorDeclaration", "fieldDeclaration", "propertyDeclaration", 
                   "interfaceMethodDeclaration", "variableDeclarators", 
                   "variableDeclarator", "arrayInitializer", "typeRef", 
                   "arraySubscripts", "typeName", "typeArguments", "formalParameters", 
                   "formalParameterList", "formalParameter", "qualifiedName", 
                   "literal", "annotation", "elementValuePairs", "elementValuePair", 
                   "elementValue", "elementValueArrayInitializer", "block", 
                   "localVariableDeclarationStatement", "localVariableDeclaration", 
                   "statement", "ifStatement", "switchStatement", "whenControl", 
                   "forStatement", "whileStatement", "doWhileStatement", 
                   "tryStatement", "returnStatement", "throwStatement", 
                   "breakStatement", "continueStatement", "insertStatement", 
                   "updateStatement", "deleteStatement", "undeleteStatement", 
                   "upsertStatement", "mergeStatement", "runAsStatement", 
                   "expressionStatement", "propertyBlock", "getter", "setter", 
                   "catchClause", "finallyBlock", "forControl", "forInit", 
                   "enhancedForControl", "forUpdate", "parExpression", "expressionList", 
                   "expression", "primary", "methodCall", "creator", "createdName", 
                   "idCreatedNamePair", "noRest", "classCreatorRest", "arrayCreatorRest", 
                   "mapCreatorRest", "mapCreatorRestPair", "setCreatorRest", 
                   "arguments", "soqlLiteral", "id" ];

function ApexParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ApexParser.prototype = Object.create(antlr4.Parser.prototype);
ApexParser.prototype.constructor = ApexParser;

Object.defineProperty(ApexParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ApexParser.EOF = antlr4.Token.EOF;
ApexParser.ABSTRACT = 1;
ApexParser.BREAK = 2;
ApexParser.BYTE = 3;
ApexParser.CATCH = 4;
ApexParser.CHAR = 5;
ApexParser.CLASS = 6;
ApexParser.CONST = 7;
ApexParser.CONTINUE = 8;
ApexParser.DEFAULT = 9;
ApexParser.DELETE = 10;
ApexParser.DO = 11;
ApexParser.ELSE = 12;
ApexParser.ENUM = 13;
ApexParser.EXTENDS = 14;
ApexParser.FINAL = 15;
ApexParser.FINALLY = 16;
ApexParser.FOR = 17;
ApexParser.GET = 18;
ApexParser.GLOBAL = 19;
ApexParser.IF = 20;
ApexParser.IMPLEMENTS = 21;
ApexParser.INHERITED = 22;
ApexParser.INSERT = 23;
ApexParser.INSTANCEOF = 24;
ApexParser.INTERFACE = 25;
ApexParser.MERGE = 26;
ApexParser.NEW = 27;
ApexParser.NULL = 28;
ApexParser.ON = 29;
ApexParser.OVERRIDE = 30;
ApexParser.PRIVATE = 31;
ApexParser.PROTECTED = 32;
ApexParser.PUBLIC = 33;
ApexParser.RETURN = 34;
ApexParser.RUNAS = 35;
ApexParser.SET = 36;
ApexParser.SHARING = 37;
ApexParser.SHORT = 38;
ApexParser.STATIC = 39;
ApexParser.SUPER = 40;
ApexParser.SWITCH = 41;
ApexParser.TESTMETHOD = 42;
ApexParser.THIS = 43;
ApexParser.THROW = 44;
ApexParser.TRANSIENT = 45;
ApexParser.TRY = 46;
ApexParser.UNDELETE = 47;
ApexParser.UPDATE = 48;
ApexParser.UPSERT = 49;
ApexParser.VIRTUAL = 50;
ApexParser.VOID = 51;
ApexParser.WEBSERVICE = 52;
ApexParser.WHEN = 53;
ApexParser.WHILE = 54;
ApexParser.WITH = 55;
ApexParser.WITHOUT = 56;
ApexParser.IntegerLiteral = 57;
ApexParser.NumberLiteral = 58;
ApexParser.BooleanLiteral = 59;
ApexParser.StringLiteral = 60;
ApexParser.NullLiteral = 61;
ApexParser.LPAREN = 62;
ApexParser.RPAREN = 63;
ApexParser.LBRACE = 64;
ApexParser.RBRACE = 65;
ApexParser.LBRACK = 66;
ApexParser.RBRACK = 67;
ApexParser.SEMI = 68;
ApexParser.COMMA = 69;
ApexParser.DOT = 70;
ApexParser.ASSIGN = 71;
ApexParser.LE = 72;
ApexParser.GE = 73;
ApexParser.GT = 74;
ApexParser.LT = 75;
ApexParser.BANG = 76;
ApexParser.TILDE = 77;
ApexParser.QUESTION = 78;
ApexParser.COLON = 79;
ApexParser.EQUAL = 80;
ApexParser.TRIPLEEQUAL = 81;
ApexParser.NOTEQUAL = 82;
ApexParser.LESSANDGREATER = 83;
ApexParser.TRIPLENOTEQUAL = 84;
ApexParser.AND = 85;
ApexParser.OR = 86;
ApexParser.INC = 87;
ApexParser.DEC = 88;
ApexParser.ADD = 89;
ApexParser.SUB = 90;
ApexParser.MUL = 91;
ApexParser.DIV = 92;
ApexParser.BITAND = 93;
ApexParser.BITOR = 94;
ApexParser.CARET = 95;
ApexParser.MOD = 96;
ApexParser.MAP = 97;
ApexParser.ADD_ASSIGN = 98;
ApexParser.SUB_ASSIGN = 99;
ApexParser.MUL_ASSIGN = 100;
ApexParser.DIV_ASSIGN = 101;
ApexParser.AND_ASSIGN = 102;
ApexParser.OR_ASSIGN = 103;
ApexParser.XOR_ASSIGN = 104;
ApexParser.MOD_ASSIGN = 105;
ApexParser.LSHIFT_ASSIGN = 106;
ApexParser.RSHIFT_ASSIGN = 107;
ApexParser.URSHIFT_ASSIGN = 108;
ApexParser.Identifier = 109;
ApexParser.AT = 110;
ApexParser.WS = 111;
ApexParser.DOC_COMMENT = 112;
ApexParser.COMMENT = 113;
ApexParser.LINE_COMMENT = 114;

ApexParser.RULE_compilationUnit = 0;
ApexParser.RULE_typeDeclaration = 1;
ApexParser.RULE_classDeclaration = 2;
ApexParser.RULE_enumDeclaration = 3;
ApexParser.RULE_enumConstants = 4;
ApexParser.RULE_interfaceDeclaration = 5;
ApexParser.RULE_typeList = 6;
ApexParser.RULE_classBody = 7;
ApexParser.RULE_interfaceBody = 8;
ApexParser.RULE_classBodyDeclaration = 9;
ApexParser.RULE_modifier = 10;
ApexParser.RULE_memberDeclaration = 11;
ApexParser.RULE_methodDeclaration = 12;
ApexParser.RULE_constructorDeclaration = 13;
ApexParser.RULE_fieldDeclaration = 14;
ApexParser.RULE_propertyDeclaration = 15;
ApexParser.RULE_interfaceMethodDeclaration = 16;
ApexParser.RULE_variableDeclarators = 17;
ApexParser.RULE_variableDeclarator = 18;
ApexParser.RULE_arrayInitializer = 19;
ApexParser.RULE_typeRef = 20;
ApexParser.RULE_arraySubscripts = 21;
ApexParser.RULE_typeName = 22;
ApexParser.RULE_typeArguments = 23;
ApexParser.RULE_formalParameters = 24;
ApexParser.RULE_formalParameterList = 25;
ApexParser.RULE_formalParameter = 26;
ApexParser.RULE_qualifiedName = 27;
ApexParser.RULE_literal = 28;
ApexParser.RULE_annotation = 29;
ApexParser.RULE_elementValuePairs = 30;
ApexParser.RULE_elementValuePair = 31;
ApexParser.RULE_elementValue = 32;
ApexParser.RULE_elementValueArrayInitializer = 33;
ApexParser.RULE_block = 34;
ApexParser.RULE_localVariableDeclarationStatement = 35;
ApexParser.RULE_localVariableDeclaration = 36;
ApexParser.RULE_statement = 37;
ApexParser.RULE_ifStatement = 38;
ApexParser.RULE_switchStatement = 39;
ApexParser.RULE_whenControl = 40;
ApexParser.RULE_forStatement = 41;
ApexParser.RULE_whileStatement = 42;
ApexParser.RULE_doWhileStatement = 43;
ApexParser.RULE_tryStatement = 44;
ApexParser.RULE_returnStatement = 45;
ApexParser.RULE_throwStatement = 46;
ApexParser.RULE_breakStatement = 47;
ApexParser.RULE_continueStatement = 48;
ApexParser.RULE_insertStatement = 49;
ApexParser.RULE_updateStatement = 50;
ApexParser.RULE_deleteStatement = 51;
ApexParser.RULE_undeleteStatement = 52;
ApexParser.RULE_upsertStatement = 53;
ApexParser.RULE_mergeStatement = 54;
ApexParser.RULE_runAsStatement = 55;
ApexParser.RULE_expressionStatement = 56;
ApexParser.RULE_propertyBlock = 57;
ApexParser.RULE_getter = 58;
ApexParser.RULE_setter = 59;
ApexParser.RULE_catchClause = 60;
ApexParser.RULE_finallyBlock = 61;
ApexParser.RULE_forControl = 62;
ApexParser.RULE_forInit = 63;
ApexParser.RULE_enhancedForControl = 64;
ApexParser.RULE_forUpdate = 65;
ApexParser.RULE_parExpression = 66;
ApexParser.RULE_expressionList = 67;
ApexParser.RULE_expression = 68;
ApexParser.RULE_primary = 69;
ApexParser.RULE_methodCall = 70;
ApexParser.RULE_creator = 71;
ApexParser.RULE_createdName = 72;
ApexParser.RULE_idCreatedNamePair = 73;
ApexParser.RULE_noRest = 74;
ApexParser.RULE_classCreatorRest = 75;
ApexParser.RULE_arrayCreatorRest = 76;
ApexParser.RULE_mapCreatorRest = 77;
ApexParser.RULE_mapCreatorRestPair = 78;
ApexParser.RULE_setCreatorRest = 79;
ApexParser.RULE_arguments = 80;
ApexParser.RULE_soqlLiteral = 81;
ApexParser.RULE_id = 82;


function CompilationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_compilationUnit;
    return this;
}

CompilationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompilationUnitContext.prototype.constructor = CompilationUnitContext;

CompilationUnitContext.prototype.typeDeclaration = function() {
    return this.getTypedRuleContext(TypeDeclarationContext,0);
};

CompilationUnitContext.prototype.EOF = function() {
    return this.getToken(ApexParser.EOF, 0);
};

CompilationUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitCompilationUnit(this);
	}
};




ApexParser.CompilationUnitContext = CompilationUnitContext;

ApexParser.prototype.compilationUnit = function() {

    var localctx = new CompilationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ApexParser.RULE_compilationUnit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 166;
        this.typeDeclaration();
        this.state = 167;
        this.match(ApexParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_typeDeclaration;
    return this;
}

TypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDeclarationContext.prototype.constructor = TypeDeclarationContext;

TypeDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

TypeDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

TypeDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

TypeDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

TypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterTypeDeclaration(this);
	}
};

TypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitTypeDeclaration(this);
	}
};




ApexParser.TypeDeclarationContext = TypeDeclarationContext;

ApexParser.prototype.typeDeclaration = function() {

    var localctx = new TypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ApexParser.RULE_typeDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 190;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 172;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)))) !== 0) || _la===ApexParser.AT) {
                this.state = 169;
                this.modifier();
                this.state = 174;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 175;
            this.classDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 179;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)))) !== 0) || _la===ApexParser.AT) {
                this.state = 176;
                this.modifier();
                this.state = 181;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 182;
            this.enumDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 186;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)))) !== 0) || _la===ApexParser.AT) {
                this.state = 183;
                this.modifier();
                this.state = 188;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 189;
            this.interfaceDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.CLASS = function() {
    return this.getToken(ApexParser.CLASS, 0);
};

ClassDeclarationContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

ClassDeclarationContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassDeclarationContext.prototype.EXTENDS = function() {
    return this.getToken(ApexParser.EXTENDS, 0);
};

ClassDeclarationContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

ClassDeclarationContext.prototype.IMPLEMENTS = function() {
    return this.getToken(ApexParser.IMPLEMENTS, 0);
};

ClassDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitClassDeclaration(this);
	}
};




ApexParser.ClassDeclarationContext = ClassDeclarationContext;

ApexParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ApexParser.RULE_classDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 192;
        this.match(ApexParser.CLASS);
        this.state = 193;
        this.id();
        this.state = 196;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexParser.EXTENDS) {
            this.state = 194;
            this.match(ApexParser.EXTENDS);
            this.state = 195;
            this.typeRef();
        }

        this.state = 200;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexParser.IMPLEMENTS) {
            this.state = 198;
            this.match(ApexParser.IMPLEMENTS);
            this.state = 199;
            this.typeList();
        }

        this.state = 202;
        this.classBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_enumDeclaration;
    return this;
}

EnumDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDeclarationContext.prototype.constructor = EnumDeclarationContext;

EnumDeclarationContext.prototype.ENUM = function() {
    return this.getToken(ApexParser.ENUM, 0);
};

EnumDeclarationContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

EnumDeclarationContext.prototype.LBRACE = function() {
    return this.getToken(ApexParser.LBRACE, 0);
};

EnumDeclarationContext.prototype.RBRACE = function() {
    return this.getToken(ApexParser.RBRACE, 0);
};

EnumDeclarationContext.prototype.enumConstants = function() {
    return this.getTypedRuleContext(EnumConstantsContext,0);
};

EnumDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterEnumDeclaration(this);
	}
};

EnumDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitEnumDeclaration(this);
	}
};




ApexParser.EnumDeclarationContext = EnumDeclarationContext;

ApexParser.prototype.enumDeclaration = function() {

    var localctx = new EnumDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ApexParser.RULE_enumDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 204;
        this.match(ApexParser.ENUM);
        this.state = 205;
        this.id();
        this.state = 206;
        this.match(ApexParser.LBRACE);
        this.state = 208;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)))) !== 0) || _la===ApexParser.Identifier) {
            this.state = 207;
            this.enumConstants();
        }

        this.state = 210;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumConstantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_enumConstants;
    return this;
}

EnumConstantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantsContext.prototype.constructor = EnumConstantsContext;

EnumConstantsContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

EnumConstantsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.COMMA);
    } else {
        return this.getToken(ApexParser.COMMA, i);
    }
};


EnumConstantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterEnumConstants(this);
	}
};

EnumConstantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitEnumConstants(this);
	}
};




ApexParser.EnumConstantsContext = EnumConstantsContext;

ApexParser.prototype.enumConstants = function() {

    var localctx = new EnumConstantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ApexParser.RULE_enumConstants);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 212;
        this.id();
        this.state = 217;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 213;
            this.match(ApexParser.COMMA);
            this.state = 214;
            this.id();
            this.state = 219;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InterfaceDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_interfaceDeclaration;
    return this;
}

InterfaceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceDeclarationContext.prototype.constructor = InterfaceDeclarationContext;

InterfaceDeclarationContext.prototype.INTERFACE = function() {
    return this.getToken(ApexParser.INTERFACE, 0);
};

InterfaceDeclarationContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

InterfaceDeclarationContext.prototype.interfaceBody = function() {
    return this.getTypedRuleContext(InterfaceBodyContext,0);
};

InterfaceDeclarationContext.prototype.EXTENDS = function() {
    return this.getToken(ApexParser.EXTENDS, 0);
};

InterfaceDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

InterfaceDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterInterfaceDeclaration(this);
	}
};

InterfaceDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitInterfaceDeclaration(this);
	}
};




ApexParser.InterfaceDeclarationContext = InterfaceDeclarationContext;

ApexParser.prototype.interfaceDeclaration = function() {

    var localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ApexParser.RULE_interfaceDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 220;
        this.match(ApexParser.INTERFACE);
        this.state = 221;
        this.id();
        this.state = 224;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexParser.EXTENDS) {
            this.state = 222;
            this.match(ApexParser.EXTENDS);
            this.state = 223;
            this.typeList();
        }

        this.state = 226;
        this.interfaceBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_typeList;
    return this;
}

TypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeListContext.prototype.constructor = TypeListContext;

TypeListContext.prototype.typeRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeRefContext);
    } else {
        return this.getTypedRuleContext(TypeRefContext,i);
    }
};

TypeListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.COMMA);
    } else {
        return this.getToken(ApexParser.COMMA, i);
    }
};


TypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterTypeList(this);
	}
};

TypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitTypeList(this);
	}
};




ApexParser.TypeListContext = TypeListContext;

ApexParser.prototype.typeList = function() {

    var localctx = new TypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ApexParser.RULE_typeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 228;
        this.typeRef();
        this.state = 233;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 229;
            this.match(ApexParser.COMMA);
            this.state = 230;
            this.typeRef();
            this.state = 235;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_classBody;
    return this;
}

ClassBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyContext.prototype.constructor = ClassBodyContext;

ClassBodyContext.prototype.LBRACE = function() {
    return this.getToken(ApexParser.LBRACE, 0);
};

ClassBodyContext.prototype.RBRACE = function() {
    return this.getToken(ApexParser.RBRACE, 0);
};

ClassBodyContext.prototype.classBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
    }
};

ClassBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterClassBody(this);
	}
};

ClassBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitClassBody(this);
	}
};




ApexParser.ClassBodyContext = ClassBodyContext;

ApexParser.prototype.classBody = function() {

    var localctx = new ClassBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ApexParser.RULE_classBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 236;
        this.match(ApexParser.LBRACE);
        this.state = 240;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)))) !== 0) || _la===ApexParser.LBRACE || _la===ApexParser.SEMI || _la===ApexParser.Identifier || _la===ApexParser.AT) {
            this.state = 237;
            this.classBodyDeclaration();
            this.state = 242;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 243;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InterfaceBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_interfaceBody;
    return this;
}

InterfaceBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceBodyContext.prototype.constructor = InterfaceBodyContext;

InterfaceBodyContext.prototype.LBRACE = function() {
    return this.getToken(ApexParser.LBRACE, 0);
};

InterfaceBodyContext.prototype.RBRACE = function() {
    return this.getToken(ApexParser.RBRACE, 0);
};

InterfaceBodyContext.prototype.interfaceMethodDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceMethodDeclarationContext);
    } else {
        return this.getTypedRuleContext(InterfaceMethodDeclarationContext,i);
    }
};

InterfaceBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterInterfaceBody(this);
	}
};

InterfaceBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitInterfaceBody(this);
	}
};




ApexParser.InterfaceBodyContext = InterfaceBodyContext;

ApexParser.prototype.interfaceBody = function() {

    var localctx = new InterfaceBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ApexParser.RULE_interfaceBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 245;
        this.match(ApexParser.LBRACE);
        this.state = 249;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)))) !== 0) || _la===ApexParser.Identifier || _la===ApexParser.AT) {
            this.state = 246;
            this.interfaceMethodDeclaration();
            this.state = 251;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 252;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_classBodyDeclaration;
    return this;
}

ClassBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyDeclarationContext.prototype.constructor = ClassBodyDeclarationContext;

ClassBodyDeclarationContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

ClassBodyDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ClassBodyDeclarationContext.prototype.STATIC = function() {
    return this.getToken(ApexParser.STATIC, 0);
};

ClassBodyDeclarationContext.prototype.memberDeclaration = function() {
    return this.getTypedRuleContext(MemberDeclarationContext,0);
};

ClassBodyDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

ClassBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterClassBodyDeclaration(this);
	}
};

ClassBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitClassBodyDeclaration(this);
	}
};




ApexParser.ClassBodyDeclarationContext = ClassBodyDeclarationContext;

ApexParser.prototype.classBodyDeclaration = function() {

    var localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ApexParser.RULE_classBodyDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 266;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 254;
            this.match(ApexParser.SEMI);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 256;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ApexParser.STATIC) {
                this.state = 255;
                this.match(ApexParser.STATIC);
            }

            this.state = 258;
            this.block();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 262;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,13,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 259;
                    this.modifier(); 
                }
                this.state = 264;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,13,this._ctx);
            }

            this.state = 265;
            this.memberDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_modifier;
    return this;
}

ModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierContext.prototype.constructor = ModifierContext;

ModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ModifierContext.prototype.GLOBAL = function() {
    return this.getToken(ApexParser.GLOBAL, 0);
};

ModifierContext.prototype.PUBLIC = function() {
    return this.getToken(ApexParser.PUBLIC, 0);
};

ModifierContext.prototype.PROTECTED = function() {
    return this.getToken(ApexParser.PROTECTED, 0);
};

ModifierContext.prototype.PRIVATE = function() {
    return this.getToken(ApexParser.PRIVATE, 0);
};

ModifierContext.prototype.TRANSIENT = function() {
    return this.getToken(ApexParser.TRANSIENT, 0);
};

ModifierContext.prototype.STATIC = function() {
    return this.getToken(ApexParser.STATIC, 0);
};

ModifierContext.prototype.ABSTRACT = function() {
    return this.getToken(ApexParser.ABSTRACT, 0);
};

ModifierContext.prototype.FINAL = function() {
    return this.getToken(ApexParser.FINAL, 0);
};

ModifierContext.prototype.WEBSERVICE = function() {
    return this.getToken(ApexParser.WEBSERVICE, 0);
};

ModifierContext.prototype.OVERRIDE = function() {
    return this.getToken(ApexParser.OVERRIDE, 0);
};

ModifierContext.prototype.VIRTUAL = function() {
    return this.getToken(ApexParser.VIRTUAL, 0);
};

ModifierContext.prototype.TESTMETHOD = function() {
    return this.getToken(ApexParser.TESTMETHOD, 0);
};

ModifierContext.prototype.WITH = function() {
    return this.getToken(ApexParser.WITH, 0);
};

ModifierContext.prototype.SHARING = function() {
    return this.getToken(ApexParser.SHARING, 0);
};

ModifierContext.prototype.WITHOUT = function() {
    return this.getToken(ApexParser.WITHOUT, 0);
};

ModifierContext.prototype.INHERITED = function() {
    return this.getToken(ApexParser.INHERITED, 0);
};

ModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterModifier(this);
	}
};

ModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitModifier(this);
	}
};




ApexParser.ModifierContext = ModifierContext;

ApexParser.prototype.modifier = function() {

    var localctx = new ModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ApexParser.RULE_modifier);
    try {
        this.state = 287;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 268;
            this.annotation();
            break;
        case ApexParser.GLOBAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 269;
            this.match(ApexParser.GLOBAL);
            break;
        case ApexParser.PUBLIC:
            this.enterOuterAlt(localctx, 3);
            this.state = 270;
            this.match(ApexParser.PUBLIC);
            break;
        case ApexParser.PROTECTED:
            this.enterOuterAlt(localctx, 4);
            this.state = 271;
            this.match(ApexParser.PROTECTED);
            break;
        case ApexParser.PRIVATE:
            this.enterOuterAlt(localctx, 5);
            this.state = 272;
            this.match(ApexParser.PRIVATE);
            break;
        case ApexParser.TRANSIENT:
            this.enterOuterAlt(localctx, 6);
            this.state = 273;
            this.match(ApexParser.TRANSIENT);
            break;
        case ApexParser.STATIC:
            this.enterOuterAlt(localctx, 7);
            this.state = 274;
            this.match(ApexParser.STATIC);
            break;
        case ApexParser.ABSTRACT:
            this.enterOuterAlt(localctx, 8);
            this.state = 275;
            this.match(ApexParser.ABSTRACT);
            break;
        case ApexParser.FINAL:
            this.enterOuterAlt(localctx, 9);
            this.state = 276;
            this.match(ApexParser.FINAL);
            break;
        case ApexParser.WEBSERVICE:
            this.enterOuterAlt(localctx, 10);
            this.state = 277;
            this.match(ApexParser.WEBSERVICE);
            break;
        case ApexParser.OVERRIDE:
            this.enterOuterAlt(localctx, 11);
            this.state = 278;
            this.match(ApexParser.OVERRIDE);
            break;
        case ApexParser.VIRTUAL:
            this.enterOuterAlt(localctx, 12);
            this.state = 279;
            this.match(ApexParser.VIRTUAL);
            break;
        case ApexParser.TESTMETHOD:
            this.enterOuterAlt(localctx, 13);
            this.state = 280;
            this.match(ApexParser.TESTMETHOD);
            break;
        case ApexParser.WITH:
            this.enterOuterAlt(localctx, 14);
            this.state = 281;
            this.match(ApexParser.WITH);
            this.state = 282;
            this.match(ApexParser.SHARING);
            break;
        case ApexParser.WITHOUT:
            this.enterOuterAlt(localctx, 15);
            this.state = 283;
            this.match(ApexParser.WITHOUT);
            this.state = 284;
            this.match(ApexParser.SHARING);
            break;
        case ApexParser.INHERITED:
            this.enterOuterAlt(localctx, 16);
            this.state = 285;
            this.match(ApexParser.INHERITED);
            this.state = 286;
            this.match(ApexParser.SHARING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_memberDeclaration;
    return this;
}

MemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberDeclarationContext.prototype.constructor = MemberDeclarationContext;

MemberDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

MemberDeclarationContext.prototype.fieldDeclaration = function() {
    return this.getTypedRuleContext(FieldDeclarationContext,0);
};

MemberDeclarationContext.prototype.constructorDeclaration = function() {
    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
};

MemberDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

MemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

MemberDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

MemberDeclarationContext.prototype.propertyDeclaration = function() {
    return this.getTypedRuleContext(PropertyDeclarationContext,0);
};

MemberDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterMemberDeclaration(this);
	}
};

MemberDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitMemberDeclaration(this);
	}
};




ApexParser.MemberDeclarationContext = MemberDeclarationContext;

ApexParser.prototype.memberDeclaration = function() {

    var localctx = new MemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ApexParser.RULE_memberDeclaration);
    try {
        this.state = 296;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 289;
            this.methodDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 290;
            this.fieldDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 291;
            this.constructorDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 292;
            this.interfaceDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 293;
            this.classDeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 294;
            this.enumDeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 295;
            this.propertyDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_methodDeclaration;
    return this;
}

MethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDeclarationContext.prototype.constructor = MethodDeclarationContext;

MethodDeclarationContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

MethodDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

MethodDeclarationContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

MethodDeclarationContext.prototype.VOID = function() {
    return this.getToken(ApexParser.VOID, 0);
};

MethodDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

MethodDeclarationContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

MethodDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

MethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitMethodDeclaration(this);
	}
};




ApexParser.MethodDeclarationContext = MethodDeclarationContext;

ApexParser.prototype.methodDeclaration = function() {

    var localctx = new MethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ApexParser.RULE_methodDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 301;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 298;
                this.modifier(); 
            }
            this.state = 303;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
        }

        this.state = 306;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.state = 304;
            this.typeRef();
            break;

        case 2:
            this.state = 305;
            this.match(ApexParser.VOID);
            break;

        }
        this.state = 308;
        this.id();
        this.state = 309;
        this.formalParameters();
        this.state = 312;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexParser.LBRACE:
            this.state = 310;
            this.block();
            break;
        case ApexParser.SEMI:
            this.state = 311;
            this.match(ApexParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstructorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_constructorDeclaration;
    return this;
}

ConstructorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorDeclarationContext.prototype.constructor = ConstructorDeclarationContext;

ConstructorDeclarationContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ConstructorDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

ConstructorDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ConstructorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterConstructorDeclaration(this);
	}
};

ConstructorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitConstructorDeclaration(this);
	}
};




ApexParser.ConstructorDeclarationContext = ConstructorDeclarationContext;

ApexParser.prototype.constructorDeclaration = function() {

    var localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ApexParser.RULE_constructorDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 314;
        this.qualifiedName();
        this.state = 315;
        this.formalParameters();
        this.state = 316;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_fieldDeclaration;
    return this;
}

FieldDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldDeclarationContext.prototype.constructor = FieldDeclarationContext;

FieldDeclarationContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

FieldDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

FieldDeclarationContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

FieldDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterFieldDeclaration(this);
	}
};

FieldDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitFieldDeclaration(this);
	}
};




ApexParser.FieldDeclarationContext = FieldDeclarationContext;

ApexParser.prototype.fieldDeclaration = function() {

    var localctx = new FieldDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ApexParser.RULE_fieldDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 318;
        this.typeRef();
        this.state = 319;
        this.variableDeclarators();
        this.state = 320;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_propertyDeclaration;
    return this;
}

PropertyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDeclarationContext.prototype.constructor = PropertyDeclarationContext;

PropertyDeclarationContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

PropertyDeclarationContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

PropertyDeclarationContext.prototype.LBRACE = function() {
    return this.getToken(ApexParser.LBRACE, 0);
};

PropertyDeclarationContext.prototype.RBRACE = function() {
    return this.getToken(ApexParser.RBRACE, 0);
};

PropertyDeclarationContext.prototype.propertyBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyBlockContext);
    } else {
        return this.getTypedRuleContext(PropertyBlockContext,i);
    }
};

PropertyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterPropertyDeclaration(this);
	}
};

PropertyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitPropertyDeclaration(this);
	}
};




ApexParser.PropertyDeclarationContext = PropertyDeclarationContext;

ApexParser.prototype.propertyDeclaration = function() {

    var localctx = new PropertyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ApexParser.RULE_propertyDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 322;
        this.typeRef();
        this.state = 323;
        this.id();
        this.state = 324;
        this.match(ApexParser.LBRACE);
        this.state = 328;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)))) !== 0) || _la===ApexParser.AT) {
            this.state = 325;
            this.propertyBlock();
            this.state = 330;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 331;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InterfaceMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_interfaceMethodDeclaration;
    return this;
}

InterfaceMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMethodDeclarationContext.prototype.constructor = InterfaceMethodDeclarationContext;

InterfaceMethodDeclarationContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

InterfaceMethodDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

InterfaceMethodDeclarationContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

InterfaceMethodDeclarationContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

InterfaceMethodDeclarationContext.prototype.VOID = function() {
    return this.getToken(ApexParser.VOID, 0);
};

InterfaceMethodDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

InterfaceMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterInterfaceMethodDeclaration(this);
	}
};

InterfaceMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitInterfaceMethodDeclaration(this);
	}
};




ApexParser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext;

ApexParser.prototype.interfaceMethodDeclaration = function() {

    var localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ApexParser.RULE_interfaceMethodDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 336;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 333;
                this.modifier(); 
            }
            this.state = 338;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

        this.state = 341;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        switch(la_) {
        case 1:
            this.state = 339;
            this.typeRef();
            break;

        case 2:
            this.state = 340;
            this.match(ApexParser.VOID);
            break;

        }
        this.state = 343;
        this.id();
        this.state = 344;
        this.formalParameters();
        this.state = 345;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclaratorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_variableDeclarators;
    return this;
}

VariableDeclaratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorsContext.prototype.constructor = VariableDeclaratorsContext;

VariableDeclaratorsContext.prototype.variableDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclaratorContext);
    } else {
        return this.getTypedRuleContext(VariableDeclaratorContext,i);
    }
};

VariableDeclaratorsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.COMMA);
    } else {
        return this.getToken(ApexParser.COMMA, i);
    }
};


VariableDeclaratorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterVariableDeclarators(this);
	}
};

VariableDeclaratorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitVariableDeclarators(this);
	}
};




ApexParser.VariableDeclaratorsContext = VariableDeclaratorsContext;

ApexParser.prototype.variableDeclarators = function() {

    var localctx = new VariableDeclaratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ApexParser.RULE_variableDeclarators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 347;
        this.variableDeclarator();
        this.state = 352;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 348;
            this.match(ApexParser.COMMA);
            this.state = 349;
            this.variableDeclarator();
            this.state = 354;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_variableDeclarator;
    return this;
}

VariableDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorContext.prototype.constructor = VariableDeclaratorContext;

VariableDeclaratorContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

VariableDeclaratorContext.prototype.ASSIGN = function() {
    return this.getToken(ApexParser.ASSIGN, 0);
};

VariableDeclaratorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterVariableDeclarator(this);
	}
};

VariableDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitVariableDeclarator(this);
	}
};




ApexParser.VariableDeclaratorContext = VariableDeclaratorContext;

ApexParser.prototype.variableDeclarator = function() {

    var localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ApexParser.RULE_variableDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 355;
        this.id();
        this.state = 358;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexParser.ASSIGN) {
            this.state = 356;
            this.match(ApexParser.ASSIGN);
            this.state = 357;
            this.expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_arrayInitializer;
    return this;
}

ArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayInitializerContext.prototype.constructor = ArrayInitializerContext;

ArrayInitializerContext.prototype.LBRACE = function() {
    return this.getToken(ApexParser.LBRACE, 0);
};

ArrayInitializerContext.prototype.RBRACE = function() {
    return this.getToken(ApexParser.RBRACE, 0);
};

ArrayInitializerContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayInitializerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.COMMA);
    } else {
        return this.getToken(ApexParser.COMMA, i);
    }
};


ArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitArrayInitializer(this);
	}
};




ApexParser.ArrayInitializerContext = ArrayInitializerContext;

ApexParser.prototype.arrayInitializer = function() {

    var localctx = new ArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ApexParser.RULE_arrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 360;
        this.match(ApexParser.LBRACE);
        this.state = 372;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.IntegerLiteral - 32)) | (1 << (ApexParser.NumberLiteral - 32)) | (1 << (ApexParser.BooleanLiteral - 32)) | (1 << (ApexParser.StringLiteral - 32)) | (1 << (ApexParser.LPAREN - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.LBRACK - 66)) | (1 << (ApexParser.BANG - 66)) | (1 << (ApexParser.TILDE - 66)) | (1 << (ApexParser.INC - 66)) | (1 << (ApexParser.DEC - 66)) | (1 << (ApexParser.ADD - 66)) | (1 << (ApexParser.SUB - 66)))) !== 0) || _la===ApexParser.Identifier) {
            this.state = 361;
            this.expression(0);
            this.state = 366;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,25,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 362;
                    this.match(ApexParser.COMMA);
                    this.state = 363;
                    this.expression(0); 
                }
                this.state = 368;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,25,this._ctx);
            }

            this.state = 370;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ApexParser.COMMA) {
                this.state = 369;
                this.match(ApexParser.COMMA);
            }

        }

        this.state = 374;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_typeRef;
    return this;
}

TypeRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeRefContext.prototype.constructor = TypeRefContext;

TypeRefContext.prototype.typeName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeNameContext);
    } else {
        return this.getTypedRuleContext(TypeNameContext,i);
    }
};

TypeRefContext.prototype.arraySubscripts = function() {
    return this.getTypedRuleContext(ArraySubscriptsContext,0);
};

TypeRefContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.DOT);
    } else {
        return this.getToken(ApexParser.DOT, i);
    }
};


TypeRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterTypeRef(this);
	}
};

TypeRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitTypeRef(this);
	}
};




ApexParser.TypeRefContext = TypeRefContext;

ApexParser.prototype.typeRef = function() {

    var localctx = new TypeRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ApexParser.RULE_typeRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 376;
        this.typeName();
        this.state = 381;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 377;
                this.match(ApexParser.DOT);
                this.state = 378;
                this.typeName(); 
            }
            this.state = 383;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
        }

        this.state = 384;
        this.arraySubscripts();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArraySubscriptsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_arraySubscripts;
    return this;
}

ArraySubscriptsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArraySubscriptsContext.prototype.constructor = ArraySubscriptsContext;

ArraySubscriptsContext.prototype.LBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.LBRACK);
    } else {
        return this.getToken(ApexParser.LBRACK, i);
    }
};


ArraySubscriptsContext.prototype.RBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.RBRACK);
    } else {
        return this.getToken(ApexParser.RBRACK, i);
    }
};


ArraySubscriptsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterArraySubscripts(this);
	}
};

ArraySubscriptsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitArraySubscripts(this);
	}
};




ApexParser.ArraySubscriptsContext = ArraySubscriptsContext;

ApexParser.prototype.arraySubscripts = function() {

    var localctx = new ArraySubscriptsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ApexParser.RULE_arraySubscripts);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 390;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 386;
                this.match(ApexParser.LBRACK);
                this.state = 387;
                this.match(ApexParser.RBRACK); 
            }
            this.state = 392;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_typeName;
    return this;
}

TypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameContext.prototype.constructor = TypeNameContext;

TypeNameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

TypeNameContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

TypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterTypeName(this);
	}
};

TypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitTypeName(this);
	}
};




ApexParser.TypeNameContext = TypeNameContext;

ApexParser.prototype.typeName = function() {

    var localctx = new TypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ApexParser.RULE_typeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 393;
        this.id();
        this.state = 395;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 394;
            this.typeArguments();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_typeArguments;
    return this;
}

TypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsContext.prototype.constructor = TypeArgumentsContext;

TypeArgumentsContext.prototype.LT = function() {
    return this.getToken(ApexParser.LT, 0);
};

TypeArgumentsContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

TypeArgumentsContext.prototype.GT = function() {
    return this.getToken(ApexParser.GT, 0);
};

TypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitTypeArguments(this);
	}
};




ApexParser.TypeArgumentsContext = TypeArgumentsContext;

ApexParser.prototype.typeArguments = function() {

    var localctx = new TypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ApexParser.RULE_typeArguments);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 397;
        this.match(ApexParser.LT);
        this.state = 398;
        this.typeList();
        this.state = 399;
        this.match(ApexParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_formalParameters;
    return this;
}

FormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParametersContext.prototype.constructor = FormalParametersContext;

FormalParametersContext.prototype.LPAREN = function() {
    return this.getToken(ApexParser.LPAREN, 0);
};

FormalParametersContext.prototype.RPAREN = function() {
    return this.getToken(ApexParser.RPAREN, 0);
};

FormalParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterFormalParameters(this);
	}
};

FormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitFormalParameters(this);
	}
};




ApexParser.FormalParametersContext = FormalParametersContext;

ApexParser.prototype.formalParameters = function() {

    var localctx = new FormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ApexParser.RULE_formalParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 401;
        this.match(ApexParser.LPAREN);
        this.state = 403;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)))) !== 0) || _la===ApexParser.Identifier || _la===ApexParser.AT) {
            this.state = 402;
            this.formalParameterList();
        }

        this.state = 405;
        this.match(ApexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParameterListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.COMMA);
    } else {
        return this.getToken(ApexParser.COMMA, i);
    }
};


FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitFormalParameterList(this);
	}
};




ApexParser.FormalParameterListContext = FormalParameterListContext;

ApexParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ApexParser.RULE_formalParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 407;
        this.formalParameter();
        this.state = 412;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 408;
            this.match(ApexParser.COMMA);
            this.state = 409;
            this.formalParameter();
            this.state = 414;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

FormalParameterContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

FormalParameterContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

FormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterFormalParameter(this);
	}
};

FormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitFormalParameter(this);
	}
};




ApexParser.FormalParameterContext = FormalParameterContext;

ApexParser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ApexParser.RULE_formalParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 418;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 415;
                this.modifier(); 
            }
            this.state = 420;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
        }

        this.state = 421;
        this.typeRef();
        this.state = 422;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_qualifiedName;
    return this;
}

QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

QualifiedNameContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.DOT);
    } else {
        return this.getToken(ApexParser.DOT, i);
    }
};


QualifiedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterQualifiedName(this);
	}
};

QualifiedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitQualifiedName(this);
	}
};




ApexParser.QualifiedNameContext = QualifiedNameContext;

ApexParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ApexParser.RULE_qualifiedName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 424;
        this.id();
        this.state = 429;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.DOT) {
            this.state = 425;
            this.match(ApexParser.DOT);
            this.state = 426;
            this.id();
            this.state = 431;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.IntegerLiteral = function() {
    return this.getToken(ApexParser.IntegerLiteral, 0);
};

LiteralContext.prototype.NumberLiteral = function() {
    return this.getToken(ApexParser.NumberLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(ApexParser.StringLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
    return this.getToken(ApexParser.BooleanLiteral, 0);
};

LiteralContext.prototype.NULL = function() {
    return this.getToken(ApexParser.NULL, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitLiteral(this);
	}
};




ApexParser.LiteralContext = LiteralContext;

ApexParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ApexParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 432;
        _la = this._input.LA(1);
        if(!(_la===ApexParser.NULL || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ApexParser.IntegerLiteral - 57)) | (1 << (ApexParser.NumberLiteral - 57)) | (1 << (ApexParser.BooleanLiteral - 57)) | (1 << (ApexParser.StringLiteral - 57)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_annotation;
    return this;
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationContext.prototype.constructor = AnnotationContext;

AnnotationContext.prototype.AT = function() {
    return this.getToken(ApexParser.AT, 0);
};

AnnotationContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

AnnotationContext.prototype.LPAREN = function() {
    return this.getToken(ApexParser.LPAREN, 0);
};

AnnotationContext.prototype.RPAREN = function() {
    return this.getToken(ApexParser.RPAREN, 0);
};

AnnotationContext.prototype.elementValuePairs = function() {
    return this.getTypedRuleContext(ElementValuePairsContext,0);
};

AnnotationContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

AnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterAnnotation(this);
	}
};

AnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitAnnotation(this);
	}
};




ApexParser.AnnotationContext = AnnotationContext;

ApexParser.prototype.annotation = function() {

    var localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ApexParser.RULE_annotation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 434;
        this.match(ApexParser.AT);
        this.state = 435;
        this.qualifiedName();
        this.state = 442;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexParser.LPAREN) {
            this.state = 436;
            this.match(ApexParser.LPAREN);
            this.state = 439;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
            if(la_===1) {
                this.state = 437;
                this.elementValuePairs();

            } else if(la_===2) {
                this.state = 438;
                this.elementValue();

            }
            this.state = 441;
            this.match(ApexParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementValuePairsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_elementValuePairs;
    return this;
}

ElementValuePairsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairsContext.prototype.constructor = ElementValuePairsContext;

ElementValuePairsContext.prototype.elementValuePair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValuePairContext);
    } else {
        return this.getTypedRuleContext(ElementValuePairContext,i);
    }
};

ElementValuePairsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.COMMA);
    } else {
        return this.getToken(ApexParser.COMMA, i);
    }
};


ElementValuePairsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterElementValuePairs(this);
	}
};

ElementValuePairsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitElementValuePairs(this);
	}
};




ApexParser.ElementValuePairsContext = ElementValuePairsContext;

ApexParser.prototype.elementValuePairs = function() {

    var localctx = new ElementValuePairsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ApexParser.RULE_elementValuePairs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 444;
        this.elementValuePair();
        this.state = 451;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)))) !== 0) || _la===ApexParser.COMMA || _la===ApexParser.Identifier) {
            this.state = 446;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ApexParser.COMMA) {
                this.state = 445;
                this.match(ApexParser.COMMA);
            }

            this.state = 448;
            this.elementValuePair();
            this.state = 453;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementValuePairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_elementValuePair;
    return this;
}

ElementValuePairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairContext.prototype.constructor = ElementValuePairContext;

ElementValuePairContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

ElementValuePairContext.prototype.ASSIGN = function() {
    return this.getToken(ApexParser.ASSIGN, 0);
};

ElementValuePairContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

ElementValuePairContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterElementValuePair(this);
	}
};

ElementValuePairContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitElementValuePair(this);
	}
};




ApexParser.ElementValuePairContext = ElementValuePairContext;

ApexParser.prototype.elementValuePair = function() {

    var localctx = new ElementValuePairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ApexParser.RULE_elementValuePair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 454;
        this.id();
        this.state = 455;
        this.match(ApexParser.ASSIGN);
        this.state = 456;
        this.elementValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_elementValue;
    return this;
}

ElementValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueContext.prototype.constructor = ElementValueContext;

ElementValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElementValueContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ElementValueContext.prototype.elementValueArrayInitializer = function() {
    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
};

ElementValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterElementValue(this);
	}
};

ElementValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitElementValue(this);
	}
};




ApexParser.ElementValueContext = ElementValueContext;

ApexParser.prototype.elementValue = function() {

    var localctx = new ElementValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ApexParser.RULE_elementValue);
    try {
        this.state = 461;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexParser.ABSTRACT:
        case ApexParser.BREAK:
        case ApexParser.BYTE:
        case ApexParser.CATCH:
        case ApexParser.CHAR:
        case ApexParser.CLASS:
        case ApexParser.CONST:
        case ApexParser.CONTINUE:
        case ApexParser.DEFAULT:
        case ApexParser.DELETE:
        case ApexParser.DO:
        case ApexParser.ELSE:
        case ApexParser.ENUM:
        case ApexParser.EXTENDS:
        case ApexParser.FINAL:
        case ApexParser.FINALLY:
        case ApexParser.FOR:
        case ApexParser.GET:
        case ApexParser.GLOBAL:
        case ApexParser.IF:
        case ApexParser.IMPLEMENTS:
        case ApexParser.INHERITED:
        case ApexParser.INSERT:
        case ApexParser.INSTANCEOF:
        case ApexParser.INTERFACE:
        case ApexParser.MERGE:
        case ApexParser.NEW:
        case ApexParser.NULL:
        case ApexParser.ON:
        case ApexParser.OVERRIDE:
        case ApexParser.PRIVATE:
        case ApexParser.PROTECTED:
        case ApexParser.PUBLIC:
        case ApexParser.RETURN:
        case ApexParser.RUNAS:
        case ApexParser.SET:
        case ApexParser.SHARING:
        case ApexParser.SHORT:
        case ApexParser.STATIC:
        case ApexParser.SUPER:
        case ApexParser.SWITCH:
        case ApexParser.TESTMETHOD:
        case ApexParser.THIS:
        case ApexParser.THROW:
        case ApexParser.TRANSIENT:
        case ApexParser.TRY:
        case ApexParser.UNDELETE:
        case ApexParser.UPDATE:
        case ApexParser.UPSERT:
        case ApexParser.VIRTUAL:
        case ApexParser.VOID:
        case ApexParser.WEBSERVICE:
        case ApexParser.WHEN:
        case ApexParser.WHILE:
        case ApexParser.WITH:
        case ApexParser.WITHOUT:
        case ApexParser.IntegerLiteral:
        case ApexParser.NumberLiteral:
        case ApexParser.BooleanLiteral:
        case ApexParser.StringLiteral:
        case ApexParser.LPAREN:
        case ApexParser.LBRACK:
        case ApexParser.BANG:
        case ApexParser.TILDE:
        case ApexParser.INC:
        case ApexParser.DEC:
        case ApexParser.ADD:
        case ApexParser.SUB:
        case ApexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 458;
            this.expression(0);
            break;
        case ApexParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 459;
            this.annotation();
            break;
        case ApexParser.LBRACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 460;
            this.elementValueArrayInitializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementValueArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_elementValueArrayInitializer;
    return this;
}

ElementValueArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueArrayInitializerContext.prototype.constructor = ElementValueArrayInitializerContext;

ElementValueArrayInitializerContext.prototype.LBRACE = function() {
    return this.getToken(ApexParser.LBRACE, 0);
};

ElementValueArrayInitializerContext.prototype.RBRACE = function() {
    return this.getToken(ApexParser.RBRACE, 0);
};

ElementValueArrayInitializerContext.prototype.elementValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValueContext);
    } else {
        return this.getTypedRuleContext(ElementValueContext,i);
    }
};

ElementValueArrayInitializerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.COMMA);
    } else {
        return this.getToken(ApexParser.COMMA, i);
    }
};


ElementValueArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterElementValueArrayInitializer(this);
	}
};

ElementValueArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitElementValueArrayInitializer(this);
	}
};




ApexParser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext;

ApexParser.prototype.elementValueArrayInitializer = function() {

    var localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ApexParser.RULE_elementValueArrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 463;
        this.match(ApexParser.LBRACE);
        this.state = 472;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.IntegerLiteral - 32)) | (1 << (ApexParser.NumberLiteral - 32)) | (1 << (ApexParser.BooleanLiteral - 32)) | (1 << (ApexParser.StringLiteral - 32)) | (1 << (ApexParser.LPAREN - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexParser.LBRACE - 64)) | (1 << (ApexParser.LBRACK - 64)) | (1 << (ApexParser.BANG - 64)) | (1 << (ApexParser.TILDE - 64)) | (1 << (ApexParser.INC - 64)) | (1 << (ApexParser.DEC - 64)) | (1 << (ApexParser.ADD - 64)) | (1 << (ApexParser.SUB - 64)))) !== 0) || _la===ApexParser.Identifier || _la===ApexParser.AT) {
            this.state = 464;
            this.elementValue();
            this.state = 469;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 465;
                    this.match(ApexParser.COMMA);
                    this.state = 466;
                    this.elementValue(); 
                }
                this.state = 471;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
            }

        }

        this.state = 475;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexParser.COMMA) {
            this.state = 474;
            this.match(ApexParser.COMMA);
        }

        this.state = 477;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.LBRACE = function() {
    return this.getToken(ApexParser.LBRACE, 0);
};

BlockContext.prototype.RBRACE = function() {
    return this.getToken(ApexParser.RBRACE, 0);
};

BlockContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitBlock(this);
	}
};




ApexParser.BlockContext = BlockContext;

ApexParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ApexParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 479;
        this.match(ApexParser.LBRACE);
        this.state = 483;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.IntegerLiteral - 32)) | (1 << (ApexParser.NumberLiteral - 32)) | (1 << (ApexParser.BooleanLiteral - 32)) | (1 << (ApexParser.StringLiteral - 32)) | (1 << (ApexParser.LPAREN - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexParser.LBRACE - 64)) | (1 << (ApexParser.LBRACK - 64)) | (1 << (ApexParser.BANG - 64)) | (1 << (ApexParser.TILDE - 64)) | (1 << (ApexParser.INC - 64)) | (1 << (ApexParser.DEC - 64)) | (1 << (ApexParser.ADD - 64)) | (1 << (ApexParser.SUB - 64)))) !== 0) || _la===ApexParser.Identifier || _la===ApexParser.AT) {
            this.state = 480;
            this.statement();
            this.state = 485;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 486;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LocalVariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_localVariableDeclarationStatement;
    return this;
}

LocalVariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationStatementContext.prototype.constructor = LocalVariableDeclarationStatementContext;

LocalVariableDeclarationStatementContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

LocalVariableDeclarationStatementContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

LocalVariableDeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterLocalVariableDeclarationStatement(this);
	}
};

LocalVariableDeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitLocalVariableDeclarationStatement(this);
	}
};




ApexParser.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext;

ApexParser.prototype.localVariableDeclarationStatement = function() {

    var localctx = new LocalVariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ApexParser.RULE_localVariableDeclarationStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 488;
        this.localVariableDeclaration();
        this.state = 489;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LocalVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_localVariableDeclaration;
    return this;
}

LocalVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationContext.prototype.constructor = LocalVariableDeclarationContext;

LocalVariableDeclarationContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

LocalVariableDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

LocalVariableDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

LocalVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterLocalVariableDeclaration(this);
	}
};

LocalVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitLocalVariableDeclaration(this);
	}
};




ApexParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext;

ApexParser.prototype.localVariableDeclaration = function() {

    var localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ApexParser.RULE_localVariableDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 494;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,44,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 491;
                this.modifier(); 
            }
            this.state = 496;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,44,this._ctx);
        }

        this.state = 497;
        this.typeRef();
        this.state = 498;
        this.variableDeclarators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

StatementContext.prototype.switchStatement = function() {
    return this.getTypedRuleContext(SwitchStatementContext,0);
};

StatementContext.prototype.forStatement = function() {
    return this.getTypedRuleContext(ForStatementContext,0);
};

StatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

StatementContext.prototype.doWhileStatement = function() {
    return this.getTypedRuleContext(DoWhileStatementContext,0);
};

StatementContext.prototype.tryStatement = function() {
    return this.getTypedRuleContext(TryStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.throwStatement = function() {
    return this.getTypedRuleContext(ThrowStatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.insertStatement = function() {
    return this.getTypedRuleContext(InsertStatementContext,0);
};

StatementContext.prototype.updateStatement = function() {
    return this.getTypedRuleContext(UpdateStatementContext,0);
};

StatementContext.prototype.deleteStatement = function() {
    return this.getTypedRuleContext(DeleteStatementContext,0);
};

StatementContext.prototype.undeleteStatement = function() {
    return this.getTypedRuleContext(UndeleteStatementContext,0);
};

StatementContext.prototype.upsertStatement = function() {
    return this.getTypedRuleContext(UpsertStatementContext,0);
};

StatementContext.prototype.mergeStatement = function() {
    return this.getTypedRuleContext(MergeStatementContext,0);
};

StatementContext.prototype.runAsStatement = function() {
    return this.getTypedRuleContext(RunAsStatementContext,0);
};

StatementContext.prototype.localVariableDeclarationStatement = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationStatementContext,0);
};

StatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitStatement(this);
	}
};




ApexParser.StatementContext = StatementContext;

ApexParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ApexParser.RULE_statement);
    try {
        this.state = 520;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 500;
            this.block();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 501;
            this.ifStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 502;
            this.switchStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 503;
            this.forStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 504;
            this.whileStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 505;
            this.doWhileStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 506;
            this.tryStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 507;
            this.returnStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 508;
            this.throwStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 509;
            this.breakStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 510;
            this.continueStatement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 511;
            this.insertStatement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 512;
            this.updateStatement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 513;
            this.deleteStatement();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 514;
            this.undeleteStatement();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 515;
            this.upsertStatement();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 516;
            this.mergeStatement();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 517;
            this.runAsStatement();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 518;
            this.localVariableDeclarationStatement();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 519;
            this.expressionStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.IF = function() {
    return this.getToken(ApexParser.IF, 0);
};

IfStatementContext.prototype.parExpression = function() {
    return this.getTypedRuleContext(ParExpressionContext,0);
};

IfStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

IfStatementContext.prototype.ELSE = function() {
    return this.getToken(ApexParser.ELSE, 0);
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitIfStatement(this);
	}
};




ApexParser.IfStatementContext = IfStatementContext;

ApexParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ApexParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 522;
        this.match(ApexParser.IF);
        this.state = 523;
        this.parExpression();
        this.state = 524;
        this.statement();
        this.state = 527;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        if(la_===1) {
            this.state = 525;
            this.match(ApexParser.ELSE);
            this.state = 526;
            this.statement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_switchStatement;
    return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.SWITCH = function() {
    return this.getToken(ApexParser.SWITCH, 0);
};

SwitchStatementContext.prototype.ON = function() {
    return this.getToken(ApexParser.ON, 0);
};

SwitchStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SwitchStatementContext.prototype.LBRACE = function() {
    return this.getToken(ApexParser.LBRACE, 0);
};

SwitchStatementContext.prototype.RBRACE = function() {
    return this.getToken(ApexParser.RBRACE, 0);
};

SwitchStatementContext.prototype.whenControl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenControlContext);
    } else {
        return this.getTypedRuleContext(WhenControlContext,i);
    }
};

SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitSwitchStatement(this);
	}
};




ApexParser.SwitchStatementContext = SwitchStatementContext;

ApexParser.prototype.switchStatement = function() {

    var localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ApexParser.RULE_switchStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 529;
        this.match(ApexParser.SWITCH);
        this.state = 530;
        this.match(ApexParser.ON);
        this.state = 531;
        this.expression(0);
        this.state = 532;
        this.match(ApexParser.LBRACE);
        this.state = 534; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 533;
            this.whenControl();
            this.state = 536; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ApexParser.WHEN);
        this.state = 538;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhenControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_whenControl;
    return this;
}

WhenControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenControlContext.prototype.constructor = WhenControlContext;

WhenControlContext.prototype.WHEN = function() {
    return this.getToken(ApexParser.WHEN, 0);
};

WhenControlContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

WhenControlContext.prototype.ELSE = function() {
    return this.getToken(ApexParser.ELSE, 0);
};

WhenControlContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

WhenControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterWhenControl(this);
	}
};

WhenControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitWhenControl(this);
	}
};




ApexParser.WhenControlContext = WhenControlContext;

ApexParser.prototype.whenControl = function() {

    var localctx = new WhenControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ApexParser.RULE_whenControl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 540;
        this.match(ApexParser.WHEN);
        this.state = 543;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            this.state = 541;
            this.match(ApexParser.ELSE);
            break;

        case 2:
            this.state = 542;
            this.expressionList();
            break;

        }
        this.state = 545;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.FOR = function() {
    return this.getToken(ApexParser.FOR, 0);
};

ForStatementContext.prototype.LPAREN = function() {
    return this.getToken(ApexParser.LPAREN, 0);
};

ForStatementContext.prototype.forControl = function() {
    return this.getTypedRuleContext(ForControlContext,0);
};

ForStatementContext.prototype.RPAREN = function() {
    return this.getToken(ApexParser.RPAREN, 0);
};

ForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitForStatement(this);
	}
};




ApexParser.ForStatementContext = ForStatementContext;

ApexParser.prototype.forStatement = function() {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ApexParser.RULE_forStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 547;
        this.match(ApexParser.FOR);
        this.state = 548;
        this.match(ApexParser.LPAREN);
        this.state = 549;
        this.forControl();
        this.state = 550;
        this.match(ApexParser.RPAREN);
        this.state = 551;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.WHILE = function() {
    return this.getToken(ApexParser.WHILE, 0);
};

WhileStatementContext.prototype.parExpression = function() {
    return this.getTypedRuleContext(ParExpressionContext,0);
};

WhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitWhileStatement(this);
	}
};




ApexParser.WhileStatementContext = WhileStatementContext;

ApexParser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ApexParser.RULE_whileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        this.match(ApexParser.WHILE);
        this.state = 554;
        this.parExpression();
        this.state = 555;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DoWhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_doWhileStatement;
    return this;
}

DoWhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoWhileStatementContext.prototype.constructor = DoWhileStatementContext;

DoWhileStatementContext.prototype.DO = function() {
    return this.getToken(ApexParser.DO, 0);
};

DoWhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

DoWhileStatementContext.prototype.WHILE = function() {
    return this.getToken(ApexParser.WHILE, 0);
};

DoWhileStatementContext.prototype.parExpression = function() {
    return this.getTypedRuleContext(ParExpressionContext,0);
};

DoWhileStatementContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

DoWhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterDoWhileStatement(this);
	}
};

DoWhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitDoWhileStatement(this);
	}
};




ApexParser.DoWhileStatementContext = DoWhileStatementContext;

ApexParser.prototype.doWhileStatement = function() {

    var localctx = new DoWhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ApexParser.RULE_doWhileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 557;
        this.match(ApexParser.DO);
        this.state = 558;
        this.statement();
        this.state = 559;
        this.match(ApexParser.WHILE);
        this.state = 560;
        this.parExpression();
        this.state = 561;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_tryStatement;
    return this;
}

TryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.TRY = function() {
    return this.getToken(ApexParser.TRY, 0);
};

TryStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TryStatementContext.prototype.finallyBlock = function() {
    return this.getTypedRuleContext(FinallyBlockContext,0);
};

TryStatementContext.prototype.catchClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CatchClauseContext);
    } else {
        return this.getTypedRuleContext(CatchClauseContext,i);
    }
};

TryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterTryStatement(this);
	}
};

TryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitTryStatement(this);
	}
};




ApexParser.TryStatementContext = TryStatementContext;

ApexParser.prototype.tryStatement = function() {

    var localctx = new TryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ApexParser.RULE_tryStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 563;
        this.match(ApexParser.TRY);
        this.state = 564;
        this.block();
        this.state = 574;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexParser.CATCH:
            this.state = 566; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 565;
            		this.catchClause();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 568; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,49, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 571;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
            if(la_===1) {
                this.state = 570;
                this.finallyBlock();

            }
            break;
        case ApexParser.FINALLY:
            this.state = 573;
            this.finallyBlock();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(ApexParser.RETURN, 0);
};

ReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

ReturnStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitReturnStatement(this);
	}
};




ApexParser.ReturnStatementContext = ReturnStatementContext;

ApexParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ApexParser.RULE_returnStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 576;
        this.match(ApexParser.RETURN);
        this.state = 578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.IntegerLiteral - 32)) | (1 << (ApexParser.NumberLiteral - 32)) | (1 << (ApexParser.BooleanLiteral - 32)) | (1 << (ApexParser.StringLiteral - 32)) | (1 << (ApexParser.LPAREN - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.LBRACK - 66)) | (1 << (ApexParser.BANG - 66)) | (1 << (ApexParser.TILDE - 66)) | (1 << (ApexParser.INC - 66)) | (1 << (ApexParser.DEC - 66)) | (1 << (ApexParser.ADD - 66)) | (1 << (ApexParser.SUB - 66)))) !== 0) || _la===ApexParser.Identifier) {
            this.state = 577;
            this.expression(0);
        }

        this.state = 580;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ThrowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

ThrowStatementContext.prototype.THROW = function() {
    return this.getToken(ApexParser.THROW, 0);
};

ThrowStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ThrowStatementContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

ThrowStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterThrowStatement(this);
	}
};

ThrowStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitThrowStatement(this);
	}
};




ApexParser.ThrowStatementContext = ThrowStatementContext;

ApexParser.prototype.throwStatement = function() {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ApexParser.RULE_throwStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 582;
        this.match(ApexParser.THROW);
        this.state = 583;
        this.expression(0);
        this.state = 584;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.BREAK = function() {
    return this.getToken(ApexParser.BREAK, 0);
};

BreakStatementContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitBreakStatement(this);
	}
};




ApexParser.BreakStatementContext = BreakStatementContext;

ApexParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ApexParser.RULE_breakStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 586;
        this.match(ApexParser.BREAK);
        this.state = 587;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.CONTINUE = function() {
    return this.getToken(ApexParser.CONTINUE, 0);
};

ContinueStatementContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

ContinueStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterContinueStatement(this);
	}
};

ContinueStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitContinueStatement(this);
	}
};




ApexParser.ContinueStatementContext = ContinueStatementContext;

ApexParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ApexParser.RULE_continueStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 589;
        this.match(ApexParser.CONTINUE);
        this.state = 590;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_insertStatement;
    return this;
}

InsertStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertStatementContext.prototype.constructor = InsertStatementContext;

InsertStatementContext.prototype.INSERT = function() {
    return this.getToken(ApexParser.INSERT, 0);
};

InsertStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InsertStatementContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

InsertStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterInsertStatement(this);
	}
};

InsertStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitInsertStatement(this);
	}
};




ApexParser.InsertStatementContext = InsertStatementContext;

ApexParser.prototype.insertStatement = function() {

    var localctx = new InsertStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ApexParser.RULE_insertStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 592;
        this.match(ApexParser.INSERT);
        this.state = 593;
        this.expression(0);
        this.state = 594;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UpdateStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_updateStatement;
    return this;
}

UpdateStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateStatementContext.prototype.constructor = UpdateStatementContext;

UpdateStatementContext.prototype.UPDATE = function() {
    return this.getToken(ApexParser.UPDATE, 0);
};

UpdateStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

UpdateStatementContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

UpdateStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterUpdateStatement(this);
	}
};

UpdateStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitUpdateStatement(this);
	}
};




ApexParser.UpdateStatementContext = UpdateStatementContext;

ApexParser.prototype.updateStatement = function() {

    var localctx = new UpdateStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ApexParser.RULE_updateStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 596;
        this.match(ApexParser.UPDATE);
        this.state = 597;
        this.expression(0);
        this.state = 598;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeleteStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_deleteStatement;
    return this;
}

DeleteStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteStatementContext.prototype.constructor = DeleteStatementContext;

DeleteStatementContext.prototype.DELETE = function() {
    return this.getToken(ApexParser.DELETE, 0);
};

DeleteStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DeleteStatementContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

DeleteStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterDeleteStatement(this);
	}
};

DeleteStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitDeleteStatement(this);
	}
};




ApexParser.DeleteStatementContext = DeleteStatementContext;

ApexParser.prototype.deleteStatement = function() {

    var localctx = new DeleteStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ApexParser.RULE_deleteStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 600;
        this.match(ApexParser.DELETE);
        this.state = 601;
        this.expression(0);
        this.state = 602;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UndeleteStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_undeleteStatement;
    return this;
}

UndeleteStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UndeleteStatementContext.prototype.constructor = UndeleteStatementContext;

UndeleteStatementContext.prototype.UNDELETE = function() {
    return this.getToken(ApexParser.UNDELETE, 0);
};

UndeleteStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

UndeleteStatementContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

UndeleteStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterUndeleteStatement(this);
	}
};

UndeleteStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitUndeleteStatement(this);
	}
};




ApexParser.UndeleteStatementContext = UndeleteStatementContext;

ApexParser.prototype.undeleteStatement = function() {

    var localctx = new UndeleteStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ApexParser.RULE_undeleteStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 604;
        this.match(ApexParser.UNDELETE);
        this.state = 605;
        this.expression(0);
        this.state = 606;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UpsertStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_upsertStatement;
    return this;
}

UpsertStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpsertStatementContext.prototype.constructor = UpsertStatementContext;

UpsertStatementContext.prototype.UPSERT = function() {
    return this.getToken(ApexParser.UPSERT, 0);
};

UpsertStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

UpsertStatementContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

UpsertStatementContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

UpsertStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterUpsertStatement(this);
	}
};

UpsertStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitUpsertStatement(this);
	}
};




ApexParser.UpsertStatementContext = UpsertStatementContext;

ApexParser.prototype.upsertStatement = function() {

    var localctx = new UpsertStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ApexParser.RULE_upsertStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 608;
        this.match(ApexParser.UPSERT);
        this.state = 609;
        this.expression(0);
        this.state = 611;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)))) !== 0) || _la===ApexParser.Identifier) {
            this.state = 610;
            this.qualifiedName();
        }

        this.state = 613;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MergeStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_mergeStatement;
    return this;
}

MergeStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MergeStatementContext.prototype.constructor = MergeStatementContext;

MergeStatementContext.prototype.MERGE = function() {
    return this.getToken(ApexParser.MERGE, 0);
};

MergeStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

MergeStatementContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

MergeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterMergeStatement(this);
	}
};

MergeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitMergeStatement(this);
	}
};




ApexParser.MergeStatementContext = MergeStatementContext;

ApexParser.prototype.mergeStatement = function() {

    var localctx = new MergeStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ApexParser.RULE_mergeStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 615;
        this.match(ApexParser.MERGE);
        this.state = 616;
        this.expression(0);
        this.state = 617;
        this.expression(0);
        this.state = 618;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RunAsStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_runAsStatement;
    return this;
}

RunAsStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RunAsStatementContext.prototype.constructor = RunAsStatementContext;

RunAsStatementContext.prototype.RUNAS = function() {
    return this.getToken(ApexParser.RUNAS, 0);
};

RunAsStatementContext.prototype.LPAREN = function() {
    return this.getToken(ApexParser.LPAREN, 0);
};

RunAsStatementContext.prototype.RPAREN = function() {
    return this.getToken(ApexParser.RPAREN, 0);
};

RunAsStatementContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

RunAsStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

RunAsStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterRunAsStatement(this);
	}
};

RunAsStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitRunAsStatement(this);
	}
};




ApexParser.RunAsStatementContext = RunAsStatementContext;

ApexParser.prototype.runAsStatement = function() {

    var localctx = new RunAsStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ApexParser.RULE_runAsStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 620;
        this.match(ApexParser.RUNAS);
        this.state = 621;
        this.match(ApexParser.LPAREN);
        this.state = 623;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.IntegerLiteral - 32)) | (1 << (ApexParser.NumberLiteral - 32)) | (1 << (ApexParser.BooleanLiteral - 32)) | (1 << (ApexParser.StringLiteral - 32)) | (1 << (ApexParser.LPAREN - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.LBRACK - 66)) | (1 << (ApexParser.BANG - 66)) | (1 << (ApexParser.TILDE - 66)) | (1 << (ApexParser.INC - 66)) | (1 << (ApexParser.DEC - 66)) | (1 << (ApexParser.ADD - 66)) | (1 << (ApexParser.SUB - 66)))) !== 0) || _la===ApexParser.Identifier) {
            this.state = 622;
            this.expressionList();
        }

        this.state = 625;
        this.match(ApexParser.RPAREN);
        this.state = 627;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        if(la_===1) {
            this.state = 626;
            this.block();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionStatementContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitExpressionStatement(this);
	}
};




ApexParser.ExpressionStatementContext = ExpressionStatementContext;

ApexParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ApexParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 629;
        this.expression(0);
        this.state = 630;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_propertyBlock;
    return this;
}

PropertyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyBlockContext.prototype.constructor = PropertyBlockContext;

PropertyBlockContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};

PropertyBlockContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

PropertyBlockContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

PropertyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterPropertyBlock(this);
	}
};

PropertyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitPropertyBlock(this);
	}
};




ApexParser.PropertyBlockContext = PropertyBlockContext;

ApexParser.prototype.propertyBlock = function() {

    var localctx = new PropertyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ApexParser.RULE_propertyBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 635;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)))) !== 0) || _la===ApexParser.AT) {
            this.state = 632;
            this.modifier();
            this.state = 637;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 640;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexParser.GET:
            this.state = 638;
            this.getter();
            break;
        case ApexParser.SET:
            this.state = 639;
            this.setter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_getter;
    return this;
}

GetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetterContext.prototype.constructor = GetterContext;

GetterContext.prototype.GET = function() {
    return this.getToken(ApexParser.GET, 0);
};

GetterContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

GetterContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

GetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterGetter(this);
	}
};

GetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitGetter(this);
	}
};




ApexParser.GetterContext = GetterContext;

ApexParser.prototype.getter = function() {

    var localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ApexParser.RULE_getter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 642;
        this.match(ApexParser.GET);
        this.state = 645;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexParser.SEMI:
            this.state = 643;
            this.match(ApexParser.SEMI);
            break;
        case ApexParser.LBRACE:
            this.state = 644;
            this.block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_setter;
    return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.SET = function() {
    return this.getToken(ApexParser.SET, 0);
};

SetterContext.prototype.SEMI = function() {
    return this.getToken(ApexParser.SEMI, 0);
};

SetterContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

SetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterSetter(this);
	}
};

SetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitSetter(this);
	}
};




ApexParser.SetterContext = SetterContext;

ApexParser.prototype.setter = function() {

    var localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ApexParser.RULE_setter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 647;
        this.match(ApexParser.SET);
        this.state = 650;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexParser.SEMI:
            this.state = 648;
            this.match(ApexParser.SEMI);
            break;
        case ApexParser.LBRACE:
            this.state = 649;
            this.block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CatchClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_catchClause;
    return this;
}

CatchClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchClauseContext.prototype.constructor = CatchClauseContext;

CatchClauseContext.prototype.CATCH = function() {
    return this.getToken(ApexParser.CATCH, 0);
};

CatchClauseContext.prototype.LPAREN = function() {
    return this.getToken(ApexParser.LPAREN, 0);
};

CatchClauseContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CatchClauseContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

CatchClauseContext.prototype.RPAREN = function() {
    return this.getToken(ApexParser.RPAREN, 0);
};

CatchClauseContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchClauseContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

CatchClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterCatchClause(this);
	}
};

CatchClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitCatchClause(this);
	}
};




ApexParser.CatchClauseContext = CatchClauseContext;

ApexParser.prototype.catchClause = function() {

    var localctx = new CatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ApexParser.RULE_catchClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 652;
        this.match(ApexParser.CATCH);
        this.state = 653;
        this.match(ApexParser.LPAREN);
        this.state = 657;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 654;
                this.modifier(); 
            }
            this.state = 659;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
        }

        this.state = 660;
        this.qualifiedName();
        this.state = 661;
        this.id();
        this.state = 662;
        this.match(ApexParser.RPAREN);
        this.state = 663;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FinallyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_finallyBlock;
    return this;
}

FinallyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyBlockContext.prototype.constructor = FinallyBlockContext;

FinallyBlockContext.prototype.FINALLY = function() {
    return this.getToken(ApexParser.FINALLY, 0);
};

FinallyBlockContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FinallyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterFinallyBlock(this);
	}
};

FinallyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitFinallyBlock(this);
	}
};




ApexParser.FinallyBlockContext = FinallyBlockContext;

ApexParser.prototype.finallyBlock = function() {

    var localctx = new FinallyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ApexParser.RULE_finallyBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 665;
        this.match(ApexParser.FINALLY);
        this.state = 666;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_forControl;
    return this;
}

ForControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForControlContext.prototype.constructor = ForControlContext;

ForControlContext.prototype.enhancedForControl = function() {
    return this.getTypedRuleContext(EnhancedForControlContext,0);
};

ForControlContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.SEMI);
    } else {
        return this.getToken(ApexParser.SEMI, i);
    }
};


ForControlContext.prototype.forInit = function() {
    return this.getTypedRuleContext(ForInitContext,0);
};

ForControlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForControlContext.prototype.forUpdate = function() {
    return this.getTypedRuleContext(ForUpdateContext,0);
};

ForControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterForControl(this);
	}
};

ForControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitForControl(this);
	}
};




ApexParser.ForControlContext = ForControlContext;

ApexParser.prototype.forControl = function() {

    var localctx = new ForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ApexParser.RULE_forControl);
    var _la = 0; // Token type
    try {
        this.state = 680;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 668;
            this.enhancedForControl();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 670;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.IntegerLiteral - 32)) | (1 << (ApexParser.NumberLiteral - 32)) | (1 << (ApexParser.BooleanLiteral - 32)) | (1 << (ApexParser.StringLiteral - 32)) | (1 << (ApexParser.LPAREN - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.LBRACK - 66)) | (1 << (ApexParser.BANG - 66)) | (1 << (ApexParser.TILDE - 66)) | (1 << (ApexParser.INC - 66)) | (1 << (ApexParser.DEC - 66)) | (1 << (ApexParser.ADD - 66)) | (1 << (ApexParser.SUB - 66)))) !== 0) || _la===ApexParser.Identifier || _la===ApexParser.AT) {
                this.state = 669;
                this.forInit();
            }

            this.state = 672;
            this.match(ApexParser.SEMI);
            this.state = 674;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.IntegerLiteral - 32)) | (1 << (ApexParser.NumberLiteral - 32)) | (1 << (ApexParser.BooleanLiteral - 32)) | (1 << (ApexParser.StringLiteral - 32)) | (1 << (ApexParser.LPAREN - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.LBRACK - 66)) | (1 << (ApexParser.BANG - 66)) | (1 << (ApexParser.TILDE - 66)) | (1 << (ApexParser.INC - 66)) | (1 << (ApexParser.DEC - 66)) | (1 << (ApexParser.ADD - 66)) | (1 << (ApexParser.SUB - 66)))) !== 0) || _la===ApexParser.Identifier) {
                this.state = 673;
                this.expression(0);
            }

            this.state = 676;
            this.match(ApexParser.SEMI);
            this.state = 678;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.IntegerLiteral - 32)) | (1 << (ApexParser.NumberLiteral - 32)) | (1 << (ApexParser.BooleanLiteral - 32)) | (1 << (ApexParser.StringLiteral - 32)) | (1 << (ApexParser.LPAREN - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.LBRACK - 66)) | (1 << (ApexParser.BANG - 66)) | (1 << (ApexParser.TILDE - 66)) | (1 << (ApexParser.INC - 66)) | (1 << (ApexParser.DEC - 66)) | (1 << (ApexParser.ADD - 66)) | (1 << (ApexParser.SUB - 66)))) !== 0) || _la===ApexParser.Identifier) {
                this.state = 677;
                this.forUpdate();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForInitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_forInit;
    return this;
}

ForInitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForInitContext.prototype.constructor = ForInitContext;

ForInitContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

ForInitContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForInitContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterForInit(this);
	}
};

ForInitContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitForInit(this);
	}
};




ApexParser.ForInitContext = ForInitContext;

ApexParser.prototype.forInit = function() {

    var localctx = new ForInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ApexParser.RULE_forInit);
    try {
        this.state = 684;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 682;
            this.localVariableDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 683;
            this.expressionList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnhancedForControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_enhancedForControl;
    return this;
}

EnhancedForControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancedForControlContext.prototype.constructor = EnhancedForControlContext;

EnhancedForControlContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

EnhancedForControlContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

EnhancedForControlContext.prototype.COLON = function() {
    return this.getToken(ApexParser.COLON, 0);
};

EnhancedForControlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

EnhancedForControlContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

EnhancedForControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterEnhancedForControl(this);
	}
};

EnhancedForControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitEnhancedForControl(this);
	}
};




ApexParser.EnhancedForControlContext = EnhancedForControlContext;

ApexParser.prototype.enhancedForControl = function() {

    var localctx = new EnhancedForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ApexParser.RULE_enhancedForControl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 689;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 686;
                this.modifier(); 
            }
            this.state = 691;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
        }

        this.state = 692;
        this.typeRef();
        this.state = 693;
        this.id();
        this.state = 694;
        this.match(ApexParser.COLON);
        this.state = 695;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForUpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_forUpdate;
    return this;
}

ForUpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForUpdateContext.prototype.constructor = ForUpdateContext;

ForUpdateContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForUpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterForUpdate(this);
	}
};

ForUpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitForUpdate(this);
	}
};




ApexParser.ForUpdateContext = ForUpdateContext;

ApexParser.prototype.forUpdate = function() {

    var localctx = new ForUpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ApexParser.RULE_forUpdate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 697;
        this.expressionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_parExpression;
    return this;
}

ParExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParExpressionContext.prototype.constructor = ParExpressionContext;

ParExpressionContext.prototype.LPAREN = function() {
    return this.getToken(ApexParser.LPAREN, 0);
};

ParExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParExpressionContext.prototype.RPAREN = function() {
    return this.getToken(ApexParser.RPAREN, 0);
};

ParExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterParExpression(this);
	}
};

ParExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitParExpression(this);
	}
};




ApexParser.ParExpressionContext = ParExpressionContext;

ApexParser.prototype.parExpression = function() {

    var localctx = new ParExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ApexParser.RULE_parExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 699;
        this.match(ApexParser.LPAREN);
        this.state = 700;
        this.expression(0);
        this.state = 701;
        this.match(ApexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.COMMA);
    } else {
        return this.getToken(ApexParser.COMMA, i);
    }
};


ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitExpressionList(this);
	}
};




ApexParser.ExpressionListContext = ExpressionListContext;

ApexParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ApexParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 703;
        this.expression(0);
        this.state = 708;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 704;
            this.match(ApexParser.COMMA);
            this.state = 705;
            this.expression(0);
            this.state = 710;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PrimaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

ApexParser.PrimaryExpressionContext = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};
PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitPrimaryExpression(this);
	}
};


function Arth1ExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Arth1ExpressionContext.prototype = Object.create(ExpressionContext.prototype);
Arth1ExpressionContext.prototype.constructor = Arth1ExpressionContext;

ApexParser.Arth1ExpressionContext = Arth1ExpressionContext;

Arth1ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Arth1ExpressionContext.prototype.MUL = function() {
    return this.getToken(ApexParser.MUL, 0);
};

Arth1ExpressionContext.prototype.DIV = function() {
    return this.getToken(ApexParser.DIV, 0);
};

Arth1ExpressionContext.prototype.MOD = function() {
    return this.getToken(ApexParser.MOD, 0);
};
Arth1ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterArth1Expression(this);
	}
};

Arth1ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitArth1Expression(this);
	}
};


function DotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
DotExpressionContext.prototype.constructor = DotExpressionContext;

ApexParser.DotExpressionContext = DotExpressionContext;

DotExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DotExpressionContext.prototype.DOT = function() {
    return this.getToken(ApexParser.DOT, 0);
};

DotExpressionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

DotExpressionContext.prototype.methodCall = function() {
    return this.getTypedRuleContext(MethodCallContext,0);
};
DotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterDotExpression(this);
	}
};

DotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitDotExpression(this);
	}
};


function BitOrExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitOrExpressionContext.prototype = Object.create(ExpressionContext.prototype);
BitOrExpressionContext.prototype.constructor = BitOrExpressionContext;

ApexParser.BitOrExpressionContext = BitOrExpressionContext;

BitOrExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

BitOrExpressionContext.prototype.BITOR = function() {
    return this.getToken(ApexParser.BITOR, 0);
};
BitOrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterBitOrExpression(this);
	}
};

BitOrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitBitOrExpression(this);
	}
};


function ArrayExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ArrayExpressionContext.prototype.constructor = ArrayExpressionContext;

ApexParser.ArrayExpressionContext = ArrayExpressionContext;

ArrayExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayExpressionContext.prototype.LBRACK = function() {
    return this.getToken(ApexParser.LBRACK, 0);
};

ArrayExpressionContext.prototype.RBRACK = function() {
    return this.getToken(ApexParser.RBRACK, 0);
};
ArrayExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterArrayExpression(this);
	}
};

ArrayExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitArrayExpression(this);
	}
};


function NewExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NewExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NewExpressionContext.prototype.constructor = NewExpressionContext;

ApexParser.NewExpressionContext = NewExpressionContext;

NewExpressionContext.prototype.NEW = function() {
    return this.getToken(ApexParser.NEW, 0);
};

NewExpressionContext.prototype.creator = function() {
    return this.getTypedRuleContext(CreatorContext,0);
};
NewExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterNewExpression(this);
	}
};

NewExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitNewExpression(this);
	}
};


function AssignExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AssignExpressionContext.prototype.constructor = AssignExpressionContext;

ApexParser.AssignExpressionContext = AssignExpressionContext;

AssignExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AssignExpressionContext.prototype.ASSIGN = function() {
    return this.getToken(ApexParser.ASSIGN, 0);
};

AssignExpressionContext.prototype.ADD_ASSIGN = function() {
    return this.getToken(ApexParser.ADD_ASSIGN, 0);
};

AssignExpressionContext.prototype.SUB_ASSIGN = function() {
    return this.getToken(ApexParser.SUB_ASSIGN, 0);
};

AssignExpressionContext.prototype.MUL_ASSIGN = function() {
    return this.getToken(ApexParser.MUL_ASSIGN, 0);
};

AssignExpressionContext.prototype.DIV_ASSIGN = function() {
    return this.getToken(ApexParser.DIV_ASSIGN, 0);
};

AssignExpressionContext.prototype.AND_ASSIGN = function() {
    return this.getToken(ApexParser.AND_ASSIGN, 0);
};

AssignExpressionContext.prototype.OR_ASSIGN = function() {
    return this.getToken(ApexParser.OR_ASSIGN, 0);
};

AssignExpressionContext.prototype.XOR_ASSIGN = function() {
    return this.getToken(ApexParser.XOR_ASSIGN, 0);
};

AssignExpressionContext.prototype.RSHIFT_ASSIGN = function() {
    return this.getToken(ApexParser.RSHIFT_ASSIGN, 0);
};

AssignExpressionContext.prototype.URSHIFT_ASSIGN = function() {
    return this.getToken(ApexParser.URSHIFT_ASSIGN, 0);
};

AssignExpressionContext.prototype.LSHIFT_ASSIGN = function() {
    return this.getToken(ApexParser.LSHIFT_ASSIGN, 0);
};

AssignExpressionContext.prototype.MOD_ASSIGN = function() {
    return this.getToken(ApexParser.MOD_ASSIGN, 0);
};
AssignExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterAssignExpression(this);
	}
};

AssignExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitAssignExpression(this);
	}
};


function MethodCallExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodCallExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MethodCallExpressionContext.prototype.constructor = MethodCallExpressionContext;

ApexParser.MethodCallExpressionContext = MethodCallExpressionContext;

MethodCallExpressionContext.prototype.methodCall = function() {
    return this.getTypedRuleContext(MethodCallContext,0);
};
MethodCallExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterMethodCallExpression(this);
	}
};

MethodCallExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitMethodCallExpression(this);
	}
};


function BitNotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitNotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
BitNotExpressionContext.prototype.constructor = BitNotExpressionContext;

ApexParser.BitNotExpressionContext = BitNotExpressionContext;

BitNotExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

BitNotExpressionContext.prototype.CARET = function() {
    return this.getToken(ApexParser.CARET, 0);
};
BitNotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterBitNotExpression(this);
	}
};

BitNotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitBitNotExpression(this);
	}
};


function Arth2ExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Arth2ExpressionContext.prototype = Object.create(ExpressionContext.prototype);
Arth2ExpressionContext.prototype.constructor = Arth2ExpressionContext;

ApexParser.Arth2ExpressionContext = Arth2ExpressionContext;

Arth2ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Arth2ExpressionContext.prototype.ADD = function() {
    return this.getToken(ApexParser.ADD, 0);
};

Arth2ExpressionContext.prototype.SUB = function() {
    return this.getToken(ApexParser.SUB, 0);
};
Arth2ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterArth2Expression(this);
	}
};

Arth2ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitArth2Expression(this);
	}
};


function LogAndExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogAndExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LogAndExpressionContext.prototype.constructor = LogAndExpressionContext;

ApexParser.LogAndExpressionContext = LogAndExpressionContext;

LogAndExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

LogAndExpressionContext.prototype.AND = function() {
    return this.getToken(ApexParser.AND, 0);
};
LogAndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterLogAndExpression(this);
	}
};

LogAndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitLogAndExpression(this);
	}
};


function CastExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

ApexParser.CastExpressionContext = CastExpressionContext;

CastExpressionContext.prototype.LPAREN = function() {
    return this.getToken(ApexParser.LPAREN, 0);
};

CastExpressionContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

CastExpressionContext.prototype.RPAREN = function() {
    return this.getToken(ApexParser.RPAREN, 0);
};

CastExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
CastExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterCastExpression(this);
	}
};

CastExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitCastExpression(this);
	}
};


function BitAndExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitAndExpressionContext.prototype = Object.create(ExpressionContext.prototype);
BitAndExpressionContext.prototype.constructor = BitAndExpressionContext;

ApexParser.BitAndExpressionContext = BitAndExpressionContext;

BitAndExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

BitAndExpressionContext.prototype.BITAND = function() {
    return this.getToken(ApexParser.BITAND, 0);
};
BitAndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterBitAndExpression(this);
	}
};

BitAndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitBitAndExpression(this);
	}
};


function LogOrExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogOrExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LogOrExpressionContext.prototype.constructor = LogOrExpressionContext;

ApexParser.LogOrExpressionContext = LogOrExpressionContext;

LogOrExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

LogOrExpressionContext.prototype.OR = function() {
    return this.getToken(ApexParser.OR, 0);
};
LogOrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterLogOrExpression(this);
	}
};

LogOrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitLogOrExpression(this);
	}
};


function CondExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CondExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CondExpressionContext.prototype.constructor = CondExpressionContext;

ApexParser.CondExpressionContext = CondExpressionContext;

CondExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

CondExpressionContext.prototype.QUESTION = function() {
    return this.getToken(ApexParser.QUESTION, 0);
};

CondExpressionContext.prototype.COLON = function() {
    return this.getToken(ApexParser.COLON, 0);
};
CondExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterCondExpression(this);
	}
};

CondExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitCondExpression(this);
	}
};


function EqualityExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualityExpressionContext.prototype = Object.create(ExpressionContext.prototype);
EqualityExpressionContext.prototype.constructor = EqualityExpressionContext;

ApexParser.EqualityExpressionContext = EqualityExpressionContext;

EqualityExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

EqualityExpressionContext.prototype.TRIPLEEQUAL = function() {
    return this.getToken(ApexParser.TRIPLEEQUAL, 0);
};

EqualityExpressionContext.prototype.TRIPLENOTEQUAL = function() {
    return this.getToken(ApexParser.TRIPLENOTEQUAL, 0);
};

EqualityExpressionContext.prototype.EQUAL = function() {
    return this.getToken(ApexParser.EQUAL, 0);
};

EqualityExpressionContext.prototype.NOTEQUAL = function() {
    return this.getToken(ApexParser.NOTEQUAL, 0);
};

EqualityExpressionContext.prototype.LESSANDGREATER = function() {
    return this.getToken(ApexParser.LESSANDGREATER, 0);
};
EqualityExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterEqualityExpression(this);
	}
};

EqualityExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitEqualityExpression(this);
	}
};


function Cmp1ExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Cmp1ExpressionContext.prototype = Object.create(ExpressionContext.prototype);
Cmp1ExpressionContext.prototype.constructor = Cmp1ExpressionContext;

ApexParser.Cmp1ExpressionContext = Cmp1ExpressionContext;

Cmp1ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Cmp1ExpressionContext.prototype.LT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.LT);
    } else {
        return this.getToken(ApexParser.LT, i);
    }
};


Cmp1ExpressionContext.prototype.GT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.GT);
    } else {
        return this.getToken(ApexParser.GT, i);
    }
};

Cmp1ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterCmp1Expression(this);
	}
};

Cmp1ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitCmp1Expression(this);
	}
};


function Cmp2ExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Cmp2ExpressionContext.prototype = Object.create(ExpressionContext.prototype);
Cmp2ExpressionContext.prototype.constructor = Cmp2ExpressionContext;

ApexParser.Cmp2ExpressionContext = Cmp2ExpressionContext;

Cmp2ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Cmp2ExpressionContext.prototype.LT = function() {
    return this.getToken(ApexParser.LT, 0);
};

Cmp2ExpressionContext.prototype.ASSIGN = function() {
    return this.getToken(ApexParser.ASSIGN, 0);
};

Cmp2ExpressionContext.prototype.GT = function() {
    return this.getToken(ApexParser.GT, 0);
};

Cmp2ExpressionContext.prototype.LE = function() {
    return this.getToken(ApexParser.LE, 0);
};

Cmp2ExpressionContext.prototype.GE = function() {
    return this.getToken(ApexParser.GE, 0);
};
Cmp2ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterCmp2Expression(this);
	}
};

Cmp2ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitCmp2Expression(this);
	}
};


function PostOpExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PostOpExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PostOpExpressionContext.prototype.constructor = PostOpExpressionContext;

ApexParser.PostOpExpressionContext = PostOpExpressionContext;

PostOpExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PostOpExpressionContext.prototype.INC = function() {
    return this.getToken(ApexParser.INC, 0);
};

PostOpExpressionContext.prototype.DEC = function() {
    return this.getToken(ApexParser.DEC, 0);
};
PostOpExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterPostOpExpression(this);
	}
};

PostOpExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitPostOpExpression(this);
	}
};


function NegExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NegExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NegExpressionContext.prototype.constructor = NegExpressionContext;

ApexParser.NegExpressionContext = NegExpressionContext;

NegExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NegExpressionContext.prototype.TILDE = function() {
    return this.getToken(ApexParser.TILDE, 0);
};

NegExpressionContext.prototype.BANG = function() {
    return this.getToken(ApexParser.BANG, 0);
};
NegExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterNegExpression(this);
	}
};

NegExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitNegExpression(this);
	}
};


function PreOpExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreOpExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PreOpExpressionContext.prototype.constructor = PreOpExpressionContext;

ApexParser.PreOpExpressionContext = PreOpExpressionContext;

PreOpExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PreOpExpressionContext.prototype.ADD = function() {
    return this.getToken(ApexParser.ADD, 0);
};

PreOpExpressionContext.prototype.SUB = function() {
    return this.getToken(ApexParser.SUB, 0);
};

PreOpExpressionContext.prototype.INC = function() {
    return this.getToken(ApexParser.INC, 0);
};

PreOpExpressionContext.prototype.DEC = function() {
    return this.getToken(ApexParser.DEC, 0);
};
PreOpExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterPreOpExpression(this);
	}
};

PreOpExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitPreOpExpression(this);
	}
};


function InstanceOfExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceOfExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InstanceOfExpressionContext.prototype.constructor = InstanceOfExpressionContext;

ApexParser.InstanceOfExpressionContext = InstanceOfExpressionContext;

InstanceOfExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InstanceOfExpressionContext.prototype.INSTANCEOF = function() {
    return this.getToken(ApexParser.INSTANCEOF, 0);
};

InstanceOfExpressionContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};
InstanceOfExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterInstanceOfExpression(this);
	}
};

InstanceOfExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitInstanceOfExpression(this);
	}
};



ApexParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 136;
    this.enterRecursionRule(localctx, 136, ApexParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 725;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PrimaryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 712;
            this.primary();
            break;

        case 2:
            localctx = new MethodCallExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 713;
            this.methodCall();
            break;

        case 3:
            localctx = new NewExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 714;
            this.match(ApexParser.NEW);
            this.state = 715;
            this.creator();
            break;

        case 4:
            localctx = new CastExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 716;
            this.match(ApexParser.LPAREN);
            this.state = 717;
            this.typeRef();
            this.state = 718;
            this.match(ApexParser.RPAREN);
            this.state = 719;
            this.expression(17);
            break;

        case 5:
            localctx = new PreOpExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 721;
            _la = this._input.LA(1);
            if(!(((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (ApexParser.INC - 87)) | (1 << (ApexParser.DEC - 87)) | (1 << (ApexParser.ADD - 87)) | (1 << (ApexParser.SUB - 87)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 722;
            this.expression(15);
            break;

        case 6:
            localctx = new NegExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 723;
            _la = this._input.LA(1);
            if(!(_la===ApexParser.BANG || _la===ApexParser.TILDE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 724;
            this.expression(14);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 801;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 799;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Arth1ExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 727;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 728;
                    _la = this._input.LA(1);
                    if(!(((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ApexParser.MUL - 91)) | (1 << (ApexParser.DIV - 91)) | (1 << (ApexParser.MOD - 91)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 729;
                    this.expression(14);
                    break;

                case 2:
                    localctx = new Arth2ExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 730;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 731;
                    _la = this._input.LA(1);
                    if(!(_la===ApexParser.ADD || _la===ApexParser.SUB)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 732;
                    this.expression(13);
                    break;

                case 3:
                    localctx = new Cmp1ExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 733;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 741;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 734;
                        this.match(ApexParser.LT);
                        this.state = 735;
                        this.match(ApexParser.LT);
                        break;

                    case 2:
                        this.state = 736;
                        this.match(ApexParser.GT);
                        this.state = 737;
                        this.match(ApexParser.GT);
                        this.state = 738;
                        this.match(ApexParser.GT);
                        break;

                    case 3:
                        this.state = 739;
                        this.match(ApexParser.GT);
                        this.state = 740;
                        this.match(ApexParser.GT);
                        break;

                    }
                    this.state = 743;
                    this.expression(12);
                    break;

                case 4:
                    localctx = new Cmp2ExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 744;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 753;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 745;
                        this.match(ApexParser.LT);
                        this.state = 746;
                        this.match(ApexParser.ASSIGN);
                        break;

                    case 2:
                        this.state = 747;
                        this.match(ApexParser.GT);
                        this.state = 748;
                        this.match(ApexParser.ASSIGN);
                        break;

                    case 3:
                        this.state = 749;
                        this.match(ApexParser.LE);
                        break;

                    case 4:
                        this.state = 750;
                        this.match(ApexParser.GE);
                        break;

                    case 5:
                        this.state = 751;
                        this.match(ApexParser.GT);
                        break;

                    case 6:
                        this.state = 752;
                        this.match(ApexParser.LT);
                        break;

                    }
                    this.state = 755;
                    this.expression(11);
                    break;

                case 5:
                    localctx = new EqualityExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 756;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 757;
                    _la = this._input.LA(1);
                    if(!(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (ApexParser.EQUAL - 80)) | (1 << (ApexParser.TRIPLEEQUAL - 80)) | (1 << (ApexParser.NOTEQUAL - 80)) | (1 << (ApexParser.LESSANDGREATER - 80)) | (1 << (ApexParser.TRIPLENOTEQUAL - 80)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 758;
                    this.expression(9);
                    break;

                case 6:
                    localctx = new BitAndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 759;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 760;
                    this.match(ApexParser.BITAND);
                    this.state = 761;
                    this.expression(8);
                    break;

                case 7:
                    localctx = new BitNotExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 762;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 763;
                    this.match(ApexParser.CARET);
                    this.state = 764;
                    this.expression(7);
                    break;

                case 8:
                    localctx = new BitOrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 765;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 766;
                    this.match(ApexParser.BITOR);
                    this.state = 767;
                    this.expression(6);
                    break;

                case 9:
                    localctx = new LogAndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 768;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 769;
                    this.match(ApexParser.AND);
                    this.state = 770;
                    this.expression(5);
                    break;

                case 10:
                    localctx = new LogOrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 771;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 772;
                    this.match(ApexParser.OR);
                    this.state = 773;
                    this.expression(4);
                    break;

                case 11:
                    localctx = new CondExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 774;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 775;
                    this.match(ApexParser.QUESTION);
                    this.state = 776;
                    this.expression(0);
                    this.state = 777;
                    this.match(ApexParser.COLON);
                    this.state = 778;
                    this.expression(2);
                    break;

                case 12:
                    localctx = new AssignExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 780;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 781;
                    _la = this._input.LA(1);
                    if(!(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ApexParser.ASSIGN - 71)) | (1 << (ApexParser.ADD_ASSIGN - 71)) | (1 << (ApexParser.SUB_ASSIGN - 71)) | (1 << (ApexParser.MUL_ASSIGN - 71)) | (1 << (ApexParser.DIV_ASSIGN - 71)) | (1 << (ApexParser.AND_ASSIGN - 71)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (ApexParser.OR_ASSIGN - 103)) | (1 << (ApexParser.XOR_ASSIGN - 103)) | (1 << (ApexParser.MOD_ASSIGN - 103)) | (1 << (ApexParser.LSHIFT_ASSIGN - 103)) | (1 << (ApexParser.RSHIFT_ASSIGN - 103)) | (1 << (ApexParser.URSHIFT_ASSIGN - 103)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 782;
                    this.expression(1);
                    break;

                case 13:
                    localctx = new DotExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 783;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 784;
                    this.match(ApexParser.DOT);
                    this.state = 787;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 785;
                        this.id();
                        break;

                    case 2:
                        this.state = 786;
                        this.methodCall();
                        break;

                    }
                    break;

                case 14:
                    localctx = new ArrayExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 789;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 790;
                    this.match(ApexParser.LBRACK);
                    this.state = 791;
                    this.expression(0);
                    this.state = 792;
                    this.match(ApexParser.RBRACK);
                    break;

                case 15:
                    localctx = new PostOpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 794;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 795;
                    _la = this._input.LA(1);
                    if(!(_la===ApexParser.INC || _la===ApexParser.DEC)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 16:
                    localctx = new InstanceOfExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 796;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 797;
                    this.match(ApexParser.INSTANCEOF);
                    this.state = 798;
                    this.typeRef();
                    break;

                } 
            }
            this.state = 803;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_primary;
    return this;
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryContext.prototype.constructor = PrimaryContext;


 
PrimaryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ThisPrimaryContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThisPrimaryContext.prototype = Object.create(PrimaryContext.prototype);
ThisPrimaryContext.prototype.constructor = ThisPrimaryContext;

ApexParser.ThisPrimaryContext = ThisPrimaryContext;

ThisPrimaryContext.prototype.THIS = function() {
    return this.getToken(ApexParser.THIS, 0);
};
ThisPrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterThisPrimary(this);
	}
};

ThisPrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitThisPrimary(this);
	}
};


function SoqlPrimaryContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SoqlPrimaryContext.prototype = Object.create(PrimaryContext.prototype);
SoqlPrimaryContext.prototype.constructor = SoqlPrimaryContext;

ApexParser.SoqlPrimaryContext = SoqlPrimaryContext;

SoqlPrimaryContext.prototype.soqlLiteral = function() {
    return this.getTypedRuleContext(SoqlLiteralContext,0);
};
SoqlPrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterSoqlPrimary(this);
	}
};

SoqlPrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitSoqlPrimary(this);
	}
};


function SuperPrimaryContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SuperPrimaryContext.prototype = Object.create(PrimaryContext.prototype);
SuperPrimaryContext.prototype.constructor = SuperPrimaryContext;

ApexParser.SuperPrimaryContext = SuperPrimaryContext;

SuperPrimaryContext.prototype.SUPER = function() {
    return this.getToken(ApexParser.SUPER, 0);
};
SuperPrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterSuperPrimary(this);
	}
};

SuperPrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitSuperPrimary(this);
	}
};


function TypeRefPrimaryContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeRefPrimaryContext.prototype = Object.create(PrimaryContext.prototype);
TypeRefPrimaryContext.prototype.constructor = TypeRefPrimaryContext;

ApexParser.TypeRefPrimaryContext = TypeRefPrimaryContext;

TypeRefPrimaryContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

TypeRefPrimaryContext.prototype.DOT = function() {
    return this.getToken(ApexParser.DOT, 0);
};

TypeRefPrimaryContext.prototype.CLASS = function() {
    return this.getToken(ApexParser.CLASS, 0);
};
TypeRefPrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterTypeRefPrimary(this);
	}
};

TypeRefPrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitTypeRefPrimary(this);
	}
};


function IdPrimaryContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdPrimaryContext.prototype = Object.create(PrimaryContext.prototype);
IdPrimaryContext.prototype.constructor = IdPrimaryContext;

ApexParser.IdPrimaryContext = IdPrimaryContext;

IdPrimaryContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};
IdPrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterIdPrimary(this);
	}
};

IdPrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitIdPrimary(this);
	}
};


function LiteralPrimaryContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralPrimaryContext.prototype = Object.create(PrimaryContext.prototype);
LiteralPrimaryContext.prototype.constructor = LiteralPrimaryContext;

ApexParser.LiteralPrimaryContext = LiteralPrimaryContext;

LiteralPrimaryContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};
LiteralPrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterLiteralPrimary(this);
	}
};

LiteralPrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitLiteralPrimary(this);
	}
};


function SubPrimaryContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubPrimaryContext.prototype = Object.create(PrimaryContext.prototype);
SubPrimaryContext.prototype.constructor = SubPrimaryContext;

ApexParser.SubPrimaryContext = SubPrimaryContext;

SubPrimaryContext.prototype.LPAREN = function() {
    return this.getToken(ApexParser.LPAREN, 0);
};

SubPrimaryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SubPrimaryContext.prototype.RPAREN = function() {
    return this.getToken(ApexParser.RPAREN, 0);
};
SubPrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterSubPrimary(this);
	}
};

SubPrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitSubPrimary(this);
	}
};



ApexParser.PrimaryContext = PrimaryContext;

ApexParser.prototype.primary = function() {

    var localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ApexParser.RULE_primary);
    try {
        this.state = 817;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SubPrimaryContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 804;
            this.match(ApexParser.LPAREN);
            this.state = 805;
            this.expression(0);
            this.state = 806;
            this.match(ApexParser.RPAREN);
            break;

        case 2:
            localctx = new ThisPrimaryContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 808;
            this.match(ApexParser.THIS);
            break;

        case 3:
            localctx = new SuperPrimaryContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 809;
            this.match(ApexParser.SUPER);
            break;

        case 4:
            localctx = new LiteralPrimaryContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 810;
            this.literal();
            break;

        case 5:
            localctx = new TypeRefPrimaryContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 811;
            this.typeRef();
            this.state = 812;
            this.match(ApexParser.DOT);
            this.state = 813;
            this.match(ApexParser.CLASS);
            break;

        case 6:
            localctx = new IdPrimaryContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 815;
            this.id();
            break;

        case 7:
            localctx = new SoqlPrimaryContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 816;
            this.soqlLiteral();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_methodCall;
    return this;
}

MethodCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodCallContext.prototype.constructor = MethodCallContext;

MethodCallContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

MethodCallContext.prototype.LPAREN = function() {
    return this.getToken(ApexParser.LPAREN, 0);
};

MethodCallContext.prototype.RPAREN = function() {
    return this.getToken(ApexParser.RPAREN, 0);
};

MethodCallContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

MethodCallContext.prototype.THIS = function() {
    return this.getToken(ApexParser.THIS, 0);
};

MethodCallContext.prototype.SUPER = function() {
    return this.getToken(ApexParser.SUPER, 0);
};

MethodCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterMethodCall(this);
	}
};

MethodCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitMethodCall(this);
	}
};




ApexParser.MethodCallContext = MethodCallContext;

ApexParser.prototype.methodCall = function() {

    var localctx = new MethodCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ApexParser.RULE_methodCall);
    var _la = 0; // Token type
    try {
        this.state = 838;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexParser.ABSTRACT:
        case ApexParser.BREAK:
        case ApexParser.BYTE:
        case ApexParser.CATCH:
        case ApexParser.CHAR:
        case ApexParser.CLASS:
        case ApexParser.CONST:
        case ApexParser.CONTINUE:
        case ApexParser.DEFAULT:
        case ApexParser.DELETE:
        case ApexParser.DO:
        case ApexParser.ELSE:
        case ApexParser.ENUM:
        case ApexParser.EXTENDS:
        case ApexParser.FINAL:
        case ApexParser.FINALLY:
        case ApexParser.FOR:
        case ApexParser.GET:
        case ApexParser.GLOBAL:
        case ApexParser.IF:
        case ApexParser.IMPLEMENTS:
        case ApexParser.INHERITED:
        case ApexParser.INSERT:
        case ApexParser.INSTANCEOF:
        case ApexParser.INTERFACE:
        case ApexParser.MERGE:
        case ApexParser.NEW:
        case ApexParser.NULL:
        case ApexParser.ON:
        case ApexParser.OVERRIDE:
        case ApexParser.PRIVATE:
        case ApexParser.PROTECTED:
        case ApexParser.PUBLIC:
        case ApexParser.RETURN:
        case ApexParser.RUNAS:
        case ApexParser.SET:
        case ApexParser.SHARING:
        case ApexParser.SHORT:
        case ApexParser.STATIC:
        case ApexParser.SWITCH:
        case ApexParser.TESTMETHOD:
        case ApexParser.THROW:
        case ApexParser.TRANSIENT:
        case ApexParser.TRY:
        case ApexParser.UNDELETE:
        case ApexParser.UPDATE:
        case ApexParser.UPSERT:
        case ApexParser.VIRTUAL:
        case ApexParser.VOID:
        case ApexParser.WEBSERVICE:
        case ApexParser.WHEN:
        case ApexParser.WHILE:
        case ApexParser.WITH:
        case ApexParser.WITHOUT:
        case ApexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 819;
            this.id();
            this.state = 820;
            this.match(ApexParser.LPAREN);
            this.state = 822;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.IntegerLiteral - 32)) | (1 << (ApexParser.NumberLiteral - 32)) | (1 << (ApexParser.BooleanLiteral - 32)) | (1 << (ApexParser.StringLiteral - 32)) | (1 << (ApexParser.LPAREN - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.LBRACK - 66)) | (1 << (ApexParser.BANG - 66)) | (1 << (ApexParser.TILDE - 66)) | (1 << (ApexParser.INC - 66)) | (1 << (ApexParser.DEC - 66)) | (1 << (ApexParser.ADD - 66)) | (1 << (ApexParser.SUB - 66)))) !== 0) || _la===ApexParser.Identifier) {
                this.state = 821;
                this.expressionList();
            }

            this.state = 824;
            this.match(ApexParser.RPAREN);
            break;
        case ApexParser.THIS:
            this.enterOuterAlt(localctx, 2);
            this.state = 826;
            this.match(ApexParser.THIS);
            this.state = 827;
            this.match(ApexParser.LPAREN);
            this.state = 829;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.IntegerLiteral - 32)) | (1 << (ApexParser.NumberLiteral - 32)) | (1 << (ApexParser.BooleanLiteral - 32)) | (1 << (ApexParser.StringLiteral - 32)) | (1 << (ApexParser.LPAREN - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.LBRACK - 66)) | (1 << (ApexParser.BANG - 66)) | (1 << (ApexParser.TILDE - 66)) | (1 << (ApexParser.INC - 66)) | (1 << (ApexParser.DEC - 66)) | (1 << (ApexParser.ADD - 66)) | (1 << (ApexParser.SUB - 66)))) !== 0) || _la===ApexParser.Identifier) {
                this.state = 828;
                this.expressionList();
            }

            this.state = 831;
            this.match(ApexParser.RPAREN);
            break;
        case ApexParser.SUPER:
            this.enterOuterAlt(localctx, 3);
            this.state = 832;
            this.match(ApexParser.SUPER);
            this.state = 833;
            this.match(ApexParser.LPAREN);
            this.state = 835;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.IntegerLiteral - 32)) | (1 << (ApexParser.NumberLiteral - 32)) | (1 << (ApexParser.BooleanLiteral - 32)) | (1 << (ApexParser.StringLiteral - 32)) | (1 << (ApexParser.LPAREN - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.LBRACK - 66)) | (1 << (ApexParser.BANG - 66)) | (1 << (ApexParser.TILDE - 66)) | (1 << (ApexParser.INC - 66)) | (1 << (ApexParser.DEC - 66)) | (1 << (ApexParser.ADD - 66)) | (1 << (ApexParser.SUB - 66)))) !== 0) || _la===ApexParser.Identifier) {
                this.state = 834;
                this.expressionList();
            }

            this.state = 837;
            this.match(ApexParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_creator;
    return this;
}

CreatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreatorContext.prototype.constructor = CreatorContext;

CreatorContext.prototype.createdName = function() {
    return this.getTypedRuleContext(CreatedNameContext,0);
};

CreatorContext.prototype.noRest = function() {
    return this.getTypedRuleContext(NoRestContext,0);
};

CreatorContext.prototype.classCreatorRest = function() {
    return this.getTypedRuleContext(ClassCreatorRestContext,0);
};

CreatorContext.prototype.arrayCreatorRest = function() {
    return this.getTypedRuleContext(ArrayCreatorRestContext,0);
};

CreatorContext.prototype.mapCreatorRest = function() {
    return this.getTypedRuleContext(MapCreatorRestContext,0);
};

CreatorContext.prototype.setCreatorRest = function() {
    return this.getTypedRuleContext(SetCreatorRestContext,0);
};

CreatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterCreator(this);
	}
};

CreatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitCreator(this);
	}
};




ApexParser.CreatorContext = CreatorContext;

ApexParser.prototype.creator = function() {

    var localctx = new CreatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ApexParser.RULE_creator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 840;
        this.createdName();
        this.state = 846;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        switch(la_) {
        case 1:
            this.state = 841;
            this.noRest();
            break;

        case 2:
            this.state = 842;
            this.classCreatorRest();
            break;

        case 3:
            this.state = 843;
            this.arrayCreatorRest();
            break;

        case 4:
            this.state = 844;
            this.mapCreatorRest();
            break;

        case 5:
            this.state = 845;
            this.setCreatorRest();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreatedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_createdName;
    return this;
}

CreatedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreatedNameContext.prototype.constructor = CreatedNameContext;

CreatedNameContext.prototype.idCreatedNamePair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdCreatedNamePairContext);
    } else {
        return this.getTypedRuleContext(IdCreatedNamePairContext,i);
    }
};

CreatedNameContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.DOT);
    } else {
        return this.getToken(ApexParser.DOT, i);
    }
};


CreatedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterCreatedName(this);
	}
};

CreatedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitCreatedName(this);
	}
};




ApexParser.CreatedNameContext = CreatedNameContext;

ApexParser.prototype.createdName = function() {

    var localctx = new CreatedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ApexParser.RULE_createdName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 848;
        this.idCreatedNamePair();
        this.state = 853;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.DOT) {
            this.state = 849;
            this.match(ApexParser.DOT);
            this.state = 850;
            this.idCreatedNamePair();
            this.state = 855;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdCreatedNamePairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_idCreatedNamePair;
    return this;
}

IdCreatedNamePairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdCreatedNamePairContext.prototype.constructor = IdCreatedNamePairContext;

IdCreatedNamePairContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

IdCreatedNamePairContext.prototype.LT = function() {
    return this.getToken(ApexParser.LT, 0);
};

IdCreatedNamePairContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

IdCreatedNamePairContext.prototype.GT = function() {
    return this.getToken(ApexParser.GT, 0);
};

IdCreatedNamePairContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterIdCreatedNamePair(this);
	}
};

IdCreatedNamePairContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitIdCreatedNamePair(this);
	}
};




ApexParser.IdCreatedNamePairContext = IdCreatedNamePairContext;

ApexParser.prototype.idCreatedNamePair = function() {

    var localctx = new IdCreatedNamePairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ApexParser.RULE_idCreatedNamePair);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 856;
        this.id();
        this.state = 861;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexParser.LT) {
            this.state = 857;
            this.match(ApexParser.LT);
            this.state = 858;
            this.typeList();
            this.state = 859;
            this.match(ApexParser.GT);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NoRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_noRest;
    return this;
}

NoRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoRestContext.prototype.constructor = NoRestContext;

NoRestContext.prototype.LBRACE = function() {
    return this.getToken(ApexParser.LBRACE, 0);
};

NoRestContext.prototype.RBRACE = function() {
    return this.getToken(ApexParser.RBRACE, 0);
};

NoRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterNoRest(this);
	}
};

NoRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitNoRest(this);
	}
};




ApexParser.NoRestContext = NoRestContext;

ApexParser.prototype.noRest = function() {

    var localctx = new NoRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ApexParser.RULE_noRest);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 863;
        this.match(ApexParser.LBRACE);
        this.state = 864;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_classCreatorRest;
    return this;
}

ClassCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassCreatorRestContext.prototype.constructor = ClassCreatorRestContext;

ClassCreatorRestContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ClassCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterClassCreatorRest(this);
	}
};

ClassCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitClassCreatorRest(this);
	}
};




ApexParser.ClassCreatorRestContext = ClassCreatorRestContext;

ApexParser.prototype.classCreatorRest = function() {

    var localctx = new ClassCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ApexParser.RULE_classCreatorRest);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 866;
        this.arguments();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_arrayCreatorRest;
    return this;
}

ArrayCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayCreatorRestContext.prototype.constructor = ArrayCreatorRestContext;

ArrayCreatorRestContext.prototype.LBRACK = function() {
    return this.getToken(ApexParser.LBRACK, 0);
};

ArrayCreatorRestContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ArrayCreatorRestContext.prototype.RBRACK = function() {
    return this.getToken(ApexParser.RBRACK, 0);
};

ArrayCreatorRestContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

ArrayCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterArrayCreatorRest(this);
	}
};

ArrayCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitArrayCreatorRest(this);
	}
};




ApexParser.ArrayCreatorRestContext = ArrayCreatorRestContext;

ApexParser.prototype.arrayCreatorRest = function() {

    var localctx = new ArrayCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ApexParser.RULE_arrayCreatorRest);
    try {
        this.state = 877;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 868;
            this.match(ApexParser.LBRACK);
            this.state = 869;
            this.expression(0);
            this.state = 870;
            this.match(ApexParser.RBRACK);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 872;
            this.match(ApexParser.LBRACK);
            this.state = 873;
            this.match(ApexParser.RBRACK);
            this.state = 875;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
            if(la_===1) {
                this.state = 874;
                this.arrayInitializer();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MapCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_mapCreatorRest;
    return this;
}

MapCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapCreatorRestContext.prototype.constructor = MapCreatorRestContext;

MapCreatorRestContext.prototype.LBRACE = function() {
    return this.getToken(ApexParser.LBRACE, 0);
};

MapCreatorRestContext.prototype.mapCreatorRestPair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MapCreatorRestPairContext);
    } else {
        return this.getTypedRuleContext(MapCreatorRestPairContext,i);
    }
};

MapCreatorRestContext.prototype.RBRACE = function() {
    return this.getToken(ApexParser.RBRACE, 0);
};

MapCreatorRestContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.COMMA);
    } else {
        return this.getToken(ApexParser.COMMA, i);
    }
};


MapCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterMapCreatorRest(this);
	}
};

MapCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitMapCreatorRest(this);
	}
};




ApexParser.MapCreatorRestContext = MapCreatorRestContext;

ApexParser.prototype.mapCreatorRest = function() {

    var localctx = new MapCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ApexParser.RULE_mapCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 879;
        this.match(ApexParser.LBRACE);
        this.state = 880;
        this.mapCreatorRestPair();
        this.state = 885;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 881;
            this.match(ApexParser.COMMA);
            this.state = 882;
            this.mapCreatorRestPair();
            this.state = 887;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 888;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MapCreatorRestPairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_mapCreatorRestPair;
    return this;
}

MapCreatorRestPairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapCreatorRestPairContext.prototype.constructor = MapCreatorRestPairContext;

MapCreatorRestPairContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

MapCreatorRestPairContext.prototype.MAP = function() {
    return this.getToken(ApexParser.MAP, 0);
};

MapCreatorRestPairContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterMapCreatorRestPair(this);
	}
};

MapCreatorRestPairContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitMapCreatorRestPair(this);
	}
};




ApexParser.MapCreatorRestPairContext = MapCreatorRestPairContext;

ApexParser.prototype.mapCreatorRestPair = function() {

    var localctx = new MapCreatorRestPairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ApexParser.RULE_mapCreatorRestPair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 890;
        this.expression(0);
        this.state = 891;
        this.match(ApexParser.MAP);
        this.state = 892;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_setCreatorRest;
    return this;
}

SetCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetCreatorRestContext.prototype.constructor = SetCreatorRestContext;

SetCreatorRestContext.prototype.LBRACE = function() {
    return this.getToken(ApexParser.LBRACE, 0);
};

SetCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SetCreatorRestContext.prototype.RBRACE = function() {
    return this.getToken(ApexParser.RBRACE, 0);
};

SetCreatorRestContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.COMMA);
    } else {
        return this.getToken(ApexParser.COMMA, i);
    }
};


SetCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterSetCreatorRest(this);
	}
};

SetCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitSetCreatorRest(this);
	}
};




ApexParser.SetCreatorRestContext = SetCreatorRestContext;

ApexParser.prototype.setCreatorRest = function() {

    var localctx = new SetCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ApexParser.RULE_setCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 894;
        this.match(ApexParser.LBRACE);
        this.state = 895;
        this.expression(0);
        this.state = 900;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 896;
            this.match(ApexParser.COMMA);

            this.state = 897;
            this.expression(0);
            this.state = 902;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 903;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.LPAREN = function() {
    return this.getToken(ApexParser.LPAREN, 0);
};

ArgumentsContext.prototype.RPAREN = function() {
    return this.getToken(ApexParser.RPAREN, 0);
};

ArgumentsContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitArguments(this);
	}
};




ApexParser.ArgumentsContext = ArgumentsContext;

ApexParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ApexParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 905;
        this.match(ApexParser.LPAREN);
        this.state = 907;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.IntegerLiteral - 32)) | (1 << (ApexParser.NumberLiteral - 32)) | (1 << (ApexParser.BooleanLiteral - 32)) | (1 << (ApexParser.StringLiteral - 32)) | (1 << (ApexParser.LPAREN - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.LBRACK - 66)) | (1 << (ApexParser.BANG - 66)) | (1 << (ApexParser.TILDE - 66)) | (1 << (ApexParser.INC - 66)) | (1 << (ApexParser.DEC - 66)) | (1 << (ApexParser.ADD - 66)) | (1 << (ApexParser.SUB - 66)))) !== 0) || _la===ApexParser.Identifier) {
            this.state = 906;
            this.expressionList();
        }

        this.state = 909;
        this.match(ApexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SoqlLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_soqlLiteral;
    return this;
}

SoqlLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SoqlLiteralContext.prototype.constructor = SoqlLiteralContext;

SoqlLiteralContext.prototype.LBRACK = function() {
    return this.getToken(ApexParser.LBRACK, 0);
};

SoqlLiteralContext.prototype.RBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.RBRACK);
    } else {
        return this.getToken(ApexParser.RBRACK, i);
    }
};


SoqlLiteralContext.prototype.soqlLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SoqlLiteralContext);
    } else {
        return this.getTypedRuleContext(SoqlLiteralContext,i);
    }
};

SoqlLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterSoqlLiteral(this);
	}
};

SoqlLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitSoqlLiteral(this);
	}
};




ApexParser.SoqlLiteralContext = SoqlLiteralContext;

ApexParser.prototype.soqlLiteral = function() {

    var localctx = new SoqlLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ApexParser.RULE_soqlLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 911;
        this.match(ApexParser.LBRACK);
        this.state = 916;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 914;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 912;
                    this.soqlLiteral();
                    break;

                case 2:
                    this.state = 913;
                    _la = this._input.LA(1);
                    if(_la<=0 || _la===ApexParser.RBRACK) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                } 
            }
            this.state = 918;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
        }

        this.state = 919;
        this.match(ApexParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_id;
    return this;
}

IdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdContext.prototype.constructor = IdContext;

IdContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

IdContext.prototype.ABSTRACT = function() {
    return this.getToken(ApexParser.ABSTRACT, 0);
};

IdContext.prototype.BREAK = function() {
    return this.getToken(ApexParser.BREAK, 0);
};

IdContext.prototype.BYTE = function() {
    return this.getToken(ApexParser.BYTE, 0);
};

IdContext.prototype.CATCH = function() {
    return this.getToken(ApexParser.CATCH, 0);
};

IdContext.prototype.CHAR = function() {
    return this.getToken(ApexParser.CHAR, 0);
};

IdContext.prototype.CLASS = function() {
    return this.getToken(ApexParser.CLASS, 0);
};

IdContext.prototype.CONST = function() {
    return this.getToken(ApexParser.CONST, 0);
};

IdContext.prototype.CONTINUE = function() {
    return this.getToken(ApexParser.CONTINUE, 0);
};

IdContext.prototype.DEFAULT = function() {
    return this.getToken(ApexParser.DEFAULT, 0);
};

IdContext.prototype.DELETE = function() {
    return this.getToken(ApexParser.DELETE, 0);
};

IdContext.prototype.DO = function() {
    return this.getToken(ApexParser.DO, 0);
};

IdContext.prototype.ELSE = function() {
    return this.getToken(ApexParser.ELSE, 0);
};

IdContext.prototype.ENUM = function() {
    return this.getToken(ApexParser.ENUM, 0);
};

IdContext.prototype.EXTENDS = function() {
    return this.getToken(ApexParser.EXTENDS, 0);
};

IdContext.prototype.FINAL = function() {
    return this.getToken(ApexParser.FINAL, 0);
};

IdContext.prototype.FINALLY = function() {
    return this.getToken(ApexParser.FINALLY, 0);
};

IdContext.prototype.FOR = function() {
    return this.getToken(ApexParser.FOR, 0);
};

IdContext.prototype.GET = function() {
    return this.getToken(ApexParser.GET, 0);
};

IdContext.prototype.GLOBAL = function() {
    return this.getToken(ApexParser.GLOBAL, 0);
};

IdContext.prototype.IF = function() {
    return this.getToken(ApexParser.IF, 0);
};

IdContext.prototype.IMPLEMENTS = function() {
    return this.getToken(ApexParser.IMPLEMENTS, 0);
};

IdContext.prototype.INHERITED = function() {
    return this.getToken(ApexParser.INHERITED, 0);
};

IdContext.prototype.INSERT = function() {
    return this.getToken(ApexParser.INSERT, 0);
};

IdContext.prototype.INSTANCEOF = function() {
    return this.getToken(ApexParser.INSTANCEOF, 0);
};

IdContext.prototype.INTERFACE = function() {
    return this.getToken(ApexParser.INTERFACE, 0);
};

IdContext.prototype.MERGE = function() {
    return this.getToken(ApexParser.MERGE, 0);
};

IdContext.prototype.NEW = function() {
    return this.getToken(ApexParser.NEW, 0);
};

IdContext.prototype.NULL = function() {
    return this.getToken(ApexParser.NULL, 0);
};

IdContext.prototype.ON = function() {
    return this.getToken(ApexParser.ON, 0);
};

IdContext.prototype.OVERRIDE = function() {
    return this.getToken(ApexParser.OVERRIDE, 0);
};

IdContext.prototype.PRIVATE = function() {
    return this.getToken(ApexParser.PRIVATE, 0);
};

IdContext.prototype.PROTECTED = function() {
    return this.getToken(ApexParser.PROTECTED, 0);
};

IdContext.prototype.PUBLIC = function() {
    return this.getToken(ApexParser.PUBLIC, 0);
};

IdContext.prototype.RETURN = function() {
    return this.getToken(ApexParser.RETURN, 0);
};

IdContext.prototype.RUNAS = function() {
    return this.getToken(ApexParser.RUNAS, 0);
};

IdContext.prototype.SET = function() {
    return this.getToken(ApexParser.SET, 0);
};

IdContext.prototype.SHARING = function() {
    return this.getToken(ApexParser.SHARING, 0);
};

IdContext.prototype.SHORT = function() {
    return this.getToken(ApexParser.SHORT, 0);
};

IdContext.prototype.STATIC = function() {
    return this.getToken(ApexParser.STATIC, 0);
};

IdContext.prototype.SWITCH = function() {
    return this.getToken(ApexParser.SWITCH, 0);
};

IdContext.prototype.TESTMETHOD = function() {
    return this.getToken(ApexParser.TESTMETHOD, 0);
};

IdContext.prototype.THROW = function() {
    return this.getToken(ApexParser.THROW, 0);
};

IdContext.prototype.TRANSIENT = function() {
    return this.getToken(ApexParser.TRANSIENT, 0);
};

IdContext.prototype.TRY = function() {
    return this.getToken(ApexParser.TRY, 0);
};

IdContext.prototype.UNDELETE = function() {
    return this.getToken(ApexParser.UNDELETE, 0);
};

IdContext.prototype.UPDATE = function() {
    return this.getToken(ApexParser.UPDATE, 0);
};

IdContext.prototype.UPSERT = function() {
    return this.getToken(ApexParser.UPSERT, 0);
};

IdContext.prototype.VIRTUAL = function() {
    return this.getToken(ApexParser.VIRTUAL, 0);
};

IdContext.prototype.VOID = function() {
    return this.getToken(ApexParser.VOID, 0);
};

IdContext.prototype.WEBSERVICE = function() {
    return this.getToken(ApexParser.WEBSERVICE, 0);
};

IdContext.prototype.WHEN = function() {
    return this.getToken(ApexParser.WHEN, 0);
};

IdContext.prototype.WHILE = function() {
    return this.getToken(ApexParser.WHILE, 0);
};

IdContext.prototype.WITH = function() {
    return this.getToken(ApexParser.WITH, 0);
};

IdContext.prototype.WITHOUT = function() {
    return this.getToken(ApexParser.WITHOUT, 0);
};

IdContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.enterId(this);
	}
};

IdContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexParserListener ) {
        listener.exitId(this);
	}
};




ApexParser.IdContext = IdContext;

ApexParser.prototype.id = function() {

    var localctx = new IdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ApexParser.RULE_id);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 921;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.BYTE) | (1 << ApexParser.CATCH) | (1 << ApexParser.CHAR) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONST) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DEFAULT) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.PROTECTED - 32)) | (1 << (ApexParser.PUBLIC - 32)) | (1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.RUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.SHORT - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)))) !== 0) || _la===ApexParser.Identifier)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ApexParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 68:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ApexParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 13);
		case 1:
			return this.precpred(this._ctx, 12);
		case 2:
			return this.precpred(this._ctx, 11);
		case 3:
			return this.precpred(this._ctx, 10);
		case 4:
			return this.precpred(this._ctx, 8);
		case 5:
			return this.precpred(this._ctx, 7);
		case 6:
			return this.precpred(this._ctx, 6);
		case 7:
			return this.precpred(this._ctx, 5);
		case 8:
			return this.precpred(this._ctx, 4);
		case 9:
			return this.precpred(this._ctx, 3);
		case 10:
			return this.precpred(this._ctx, 2);
		case 11:
			return this.precpred(this._ctx, 1);
		case 12:
			return this.precpred(this._ctx, 21);
		case 13:
			return this.precpred(this._ctx, 20);
		case 14:
			return this.precpred(this._ctx, 16);
		case 15:
			return this.precpred(this._ctx, 9);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ApexParser = ApexParser;
